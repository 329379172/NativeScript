<?xml version="1.0"?>
<js:global xsi:schemaLocation="http://www.telerik.com/2014/js/api JavaScriptAPI.xsd" xmlns:js="http://www.telerik.com/2014/js/api" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xs="http://www.w3.org/2001/XMLSchema"><js:module qname="&quot;application&quot;"><js:var name="mainModule"><js:type-annotation><js:string/></js:type-annotation></js:var><js:function name="start"/><js:function name="onLaunch"><js:doc><![CDATA[The main entry point event. This method is expected to use the root frame to navigate to the main application page.]]></js:doc><js:param name="context"><js:type-annotation><js:object/></js:type-annotation></js:param></js:function><js:function name="onSuspend"><js:doc><![CDATA[This method will be called when the Application is suspended.]]></js:doc></js:function><js:function name="onResume"><js:doc><![CDATA[This method will be called when the Application is resumed after it has been suspended.]]></js:doc></js:function><js:function name="onExit"><js:doc><![CDATA[This method will be called when the Application is about to exit.]]></js:doc></js:function><js:function name="onLowMemory"><js:doc><![CDATA[This method will be called when there is low memory on the target device.]]></js:doc></js:function><js:var name="android"><js:type-annotation><js:type name="&quot;application&quot;:AndroidApplication"/></js:type-annotation></js:var><js:var name="ios"><js:type-annotation><js:type name="&quot;application&quot;:iOSApplication"/></js:type-annotation></js:var><js:interface qname="&quot;application&quot;:AndroidApplication"><js:doc><![CDATA[The abstraction of an Android-specific application object.]]></js:doc><js:property name="nativeApp"><js:doc><![CDATA[The android.app.Application object instance provided to the init of the module.]]></js:doc><js:type-annotation><js:type name="android.app:Application"/></js:type-annotation></js:property><js:property name="context"><js:doc><![CDATA[The application android.content.Context object instance.]]></js:doc><js:type-annotation><js:type name="android.content:Context"/></js:type-annotation></js:property><js:property name="foregroundActivity"><js:doc><![CDATA[The currently active (loaded) android.app.Activity. This property is automatically updated upon Activity events.]]></js:doc><js:type-annotation><js:type name="android.app:Activity"/></js:type-annotation></js:property><js:property name="currentContext"><js:doc><![CDATA[The currently active (loaded) Context. This is typically the top-level Activity that is just created.]]></js:doc><js:type-annotation><js:type name="android.content:Context"/></js:type-annotation></js:property><js:property name="startActivity"><js:doc><![CDATA[The main (start) Activity for the application.]]></js:doc><js:type-annotation><js:type name="android.app:Activity"/></js:type-annotation></js:property><js:property name="packageName"><js:doc><![CDATA[The name of the application package.]]></js:doc><js:type-annotation><js:string/></js:type-annotation></js:property><js:method name="getActivity"><js:doc><![CDATA[This method is called by the JavaScript Bridge when navigation to a new activity is triggered.
The return value of this method should be com.tns.NativeScriptActivity.extend implementation.]]></js:doc><js:param name="intent"><js:type-annotation><js:type name="android.content:Intent"/></js:type-annotation></js:param><js:returns><js:object/></js:returns></js:method><js:property name="onActivityCreated"><js:doc><![CDATA[Direct handler of the android.app.Application.ActivityLifecycleCallbacks.onActivityCreated method.]]></js:doc><js:type-annotation><js:function><js:param name="activity"><js:type-annotation><js:type name="android.app:Activity"/></js:type-annotation></js:param><js:param name="bundle"><js:type-annotation><js:type name="android.os:Bundle"/></js:type-annotation></js:param></js:function></js:type-annotation></js:property><js:property name="onActivityDestroyed"><js:doc><![CDATA[Direct handler of the android.app.Application.ActivityLifecycleCallbacks.onActivityDestroyed method.]]></js:doc><js:type-annotation><js:function><js:param name="activity"><js:type-annotation><js:type name="android.app:Activity"/></js:type-annotation></js:param></js:function></js:type-annotation></js:property><js:property name="onActivityStarted"><js:doc><![CDATA[Direct handler of the android.app.Application.ActivityLifecycleCallbacks.onActivityDestroyed method.]]></js:doc><js:type-annotation><js:function><js:param name="activity"><js:type-annotation><js:type name="android.app:Activity"/></js:type-annotation></js:param></js:function></js:type-annotation></js:property><js:property name="onActivityPaused"><js:doc><![CDATA[Direct handler of the android.app.Application.ActivityLifecycleCallbacks.onActivityPaused method.]]></js:doc><js:type-annotation><js:function><js:param name="activity"><js:type-annotation><js:type name="android.app:Activity"/></js:type-annotation></js:param></js:function></js:type-annotation></js:property><js:property name="onActivityResumed"><js:doc><![CDATA[Direct handler of the android.app.Application.ActivityLifecycleCallbacks.onActivityResumed method.]]></js:doc><js:type-annotation><js:function><js:param name="activity"><js:type-annotation><js:type name="android.app:Activity"/></js:type-annotation></js:param></js:function></js:type-annotation></js:property><js:property name="onActivityStopped"><js:doc><![CDATA[Direct handler of the android.app.Application.ActivityLifecycleCallbacks.onActivityStopped method.]]></js:doc><js:type-annotation><js:function><js:param name="activity"><js:type-annotation><js:type name="android.app:Activity"/></js:type-annotation></js:param></js:function></js:type-annotation></js:property><js:property name="onSaveActivityState"><js:doc><![CDATA[Direct handler of the android.app.Application.ActivityLifecycleCallbacks.onSaveActivityState method.]]></js:doc><js:type-annotation><js:function><js:param name="activity"><js:type-annotation><js:type name="android.app:Activity"/></js:type-annotation></js:param><js:param name="bundle"><js:type-annotation><js:type name="android.os:Bundle"/></js:type-annotation></js:param></js:function></js:type-annotation></js:property></js:interface><js:interface qname="&quot;application&quot;:iOSApplication"><js:property name="rootController"><js:doc><![CDATA[The root view controller for the application.]]></js:doc><js:type-annotation><js:type name="UIViewController"/></js:type-annotation></js:property><js:property name="nativeApp"><js:doc><![CDATA[The android.app.Application object instance provided to the init of the module.]]></js:doc><js:type-annotation><js:type name="UIApplication"/></js:type-annotation></js:property></js:interface></js:module><js:module qname="&quot;color&quot;"><js:class qname="&quot;color&quot;:Color"><js:field name="a"><js:doc><![CDATA[Gets the Alpha component (in the [0, 255] range) of this color. This is a read-only property.]]></js:doc><js:type-annotation><js:number/></js:type-annotation></js:field><js:field name="r"><js:doc><![CDATA[Gets the Red component (in the [0, 255] range) of this color. This is a read-only property.]]></js:doc><js:type-annotation><js:number/></js:type-annotation></js:field><js:field name="g"><js:doc><![CDATA[Gets the Green component (in the [0, 255] range) of this color. This is a read-only property.]]></js:doc><js:type-annotation><js:number/></js:type-annotation></js:field><js:field name="b"><js:doc><![CDATA[Gets the Blue component (in the [0, 255] range) of this color. This is a read-only property.]]></js:doc><js:type-annotation><js:number/></js:type-annotation></js:field><js:field name="hex"><js:doc><![CDATA[Gets the Hexademical string representation of this color. This is a read-only property.]]></js:doc><js:type-annotation><js:string/></js:type-annotation></js:field><js:field name="argb"><js:doc><![CDATA[Gets the Argb Number representation of this color where each 8 bits represent a single color component. This is a read-only property.]]></js:doc><js:type-annotation><js:number/></js:type-annotation></js:field><js:field name="name"><js:doc><![CDATA[Gets the known name of this instance. Defined only if it has been constructed from a known color name - e.g. "red". This is a read-only property.]]></js:doc><js:type-annotation><js:string/></js:type-annotation></js:field><js:field name="android"><js:doc><![CDATA[Gets the android-specific integer value representation. Same as the Argb one. This is a read-only property.]]></js:doc><js:type-annotation><js:number/></js:type-annotation></js:field><js:field name="ios"><js:doc><![CDATA[Gets the iOS-specific UIColor value representation. This is a read-only property.]]></js:doc><js:type-annotation><js:type name="UIColor"/></js:type-annotation></js:field></js:class></js:module><js:module qname="&quot;fps-meter&quot;"><js:function name="start"/><js:function name="stop"/><js:function name="running"><js:returns><js:boolean/></js:returns></js:function><js:function name="addCallback"><js:param name="callback"><js:type-annotation><js:function><js:param name="fps"><js:type-annotation><js:number/></js:type-annotation></js:param><js:param name="minFps" optional="true"><js:type-annotation><js:number/></js:type-annotation></js:param></js:function></js:type-annotation></js:param><js:returns><js:number/></js:returns></js:function><js:function name="removeCallback"><js:param name="id"><js:type-annotation><js:number/></js:type-annotation></js:param></js:function></js:module><js:module qname="&quot;http&quot;"><js:function name="getString"><js:doc><![CDATA[Downloads the content from the specified URL as a string.]]></js:doc><js:param name="url"><js:doc><![CDATA[The URL to request from.]]></js:doc><js:type-annotation><js:string/></js:type-annotation></js:param><js:returns><js:type name="Promise"><js:string/></js:type></js:returns></js:function><js:function name="getString"><js:doc><![CDATA[Downloads the content from the specified URL as a string.]]></js:doc><js:param name="options"><js:doc><![CDATA[An object that specifies various request options.]]></js:doc><js:type-annotation><js:type name="&quot;http&quot;:HttpRequestOptions"/></js:type-annotation></js:param><js:returns><js:type name="Promise"><js:string/></js:type></js:returns></js:function><js:function name="getJSON"><js:doc><![CDATA[Downloads the content from the specified URL as a string and returns its JSON.parse representation.]]></js:doc><js:type-param name="T"/><js:param name="url"><js:doc><![CDATA[The URL to request from.]]></js:doc><js:type-annotation><js:string/></js:type-annotation></js:param><js:returns><js:type name="Promise"><js:type-ref name="T"/></js:type></js:returns></js:function><js:function name="getJSON"><js:doc><![CDATA[Downloads the content from the specified URL as a string and returns its JSON.parse representation.]]></js:doc><js:type-param name="T"/><js:param name="options"><js:doc><![CDATA[An object that specifies various request options.]]></js:doc><js:type-annotation><js:type name="&quot;http&quot;:HttpRequestOptions"/></js:type-annotation></js:param><js:returns><js:type name="Promise"><js:type-ref name="T"/></js:type></js:returns></js:function><js:function name="getImage"><js:doc><![CDATA[Downloads the content from the specified URL and attempts to decode it as an image.]]></js:doc><js:param name="url"><js:doc><![CDATA[The URL to request from.]]></js:doc><js:type-annotation><js:string/></js:type-annotation></js:param><js:returns><js:type name="Promise"><js:type name="&quot;image-source&quot;:ImageSource"/></js:type></js:returns></js:function><js:function name="getImage"><js:doc><![CDATA[Downloads the content from the specified URL and attempts to decode it as an image.]]></js:doc><js:param name="options"><js:doc><![CDATA[An object that specifies various request options.]]></js:doc><js:type-annotation><js:type name="&quot;http&quot;:HttpRequestOptions"/></js:type-annotation></js:param><js:returns><js:type name="Promise"><js:type name="&quot;image-source&quot;:ImageSource"/></js:type></js:returns></js:function><js:function name="request"><js:doc><![CDATA[Makes a generic http request using the provided options and returns a HttpResponse Object.]]></js:doc><js:param name="options"><js:doc><![CDATA[An object that specifies various request options.]]></js:doc><js:type-annotation><js:type name="&quot;http&quot;:HttpRequestOptions"/></js:type-annotation></js:param><js:returns><js:type name="Promise"><js:type name="&quot;http&quot;:HttpResponse"/></js:type></js:returns></js:function><js:interface qname="&quot;http&quot;:HttpRequestOptions"><js:doc><![CDATA[Provides options for the http requests.]]></js:doc><js:property name="url"><js:doc><![CDATA[Gets or sets the request url.]]></js:doc><js:type-annotation><js:string/></js:type-annotation></js:property><js:property name="method"><js:doc><![CDATA[Gets or sets the request method.]]></js:doc><js:type-annotation><js:string/></js:type-annotation></js:property><js:property name="headers" optional="true"><js:doc><![CDATA[Gets or sets the request headers in JSON format.]]></js:doc><js:type-annotation><js:object/></js:type-annotation></js:property><js:property name="content" optional="true"><js:doc><![CDATA[Gets or sets the request body.]]></js:doc><js:type-annotation><js:object/></js:type-annotation></js:property><js:property name="timeout" optional="true"><js:doc><![CDATA[Gets or sets the request timeout.]]></js:doc><js:type-annotation><js:number/></js:type-annotation></js:property></js:interface><js:interface qname="&quot;http&quot;:HttpResponse"><js:doc><![CDATA[Encapsulates HTTP-response information from an HTTP-request.]]></js:doc><js:property name="statusCode"><js:doc><![CDATA[Gets the response status code.]]></js:doc><js:type-annotation><js:number/></js:type-annotation></js:property><js:property name="headers"><js:doc><![CDATA[Gets the response headers.]]></js:doc><js:type-annotation><js:object/></js:type-annotation></js:property><js:property name="content" optional="true"><js:doc><![CDATA[Gets the response content.]]></js:doc><js:type-annotation><js:type name="&quot;http&quot;:HttpContent"/></js:type-annotation></js:property></js:interface><js:interface qname="&quot;http&quot;:HttpContent"><js:doc><![CDATA[Encapsulates the content of an HttpResponse.]]></js:doc><js:property name="raw"><js:doc><![CDATA[Gets the response body as raw data.]]></js:doc><js:type-annotation><js:object/></js:type-annotation></js:property><js:property name="toString"><js:doc><![CDATA[Gets the response body as string.]]></js:doc><js:type-annotation><js:function><js:returns><js:string/></js:returns></js:function></js:type-annotation></js:property><js:property name="toJSON"><js:doc><![CDATA[Gets the response body as JSON object.]]></js:doc><js:type-annotation><js:function><js:returns><js:object/></js:returns></js:function></js:type-annotation></js:property><js:property name="toImage"><js:doc><![CDATA[Gets the response body as ImageSource.]]></js:doc><js:type-annotation><js:function><js:returns><js:type name="Promise"><js:type name="&quot;image-source&quot;:ImageSource"/></js:type></js:returns></js:function></js:type-annotation></js:property></js:interface></js:module><js:module qname="&quot;image-source&quot;"><js:enum qname="&quot;image-source&quot;:ImageFormat"><js:doc><![CDATA[Defines the recognized image formats.]]></js:doc><js:member name="PNG"><js:doc><![CDATA[The W3C Portable Network Graphics (PNG) image format.]]></js:doc></js:member><js:member name="JPEG"><js:doc><![CDATA[The Joint Photographic Experts Group (JPEG) image format.]]></js:doc></js:member></js:enum><js:class qname="&quot;image-source&quot;:ImageSource"><js:doc><![CDATA[Encapsulates the common abstraction behind a platform specific object (typically a Bitmap) that is used as a source for images.]]></js:doc><js:field name="height"><js:doc><![CDATA[Gets the height of this instance. This is a read-only property.]]></js:doc><js:type-annotation><js:number/></js:type-annotation></js:field><js:field name="width"><js:doc><![CDATA[Gets the width of this instance. This is a read-only property.]]></js:doc><js:type-annotation><js:number/></js:type-annotation></js:field><js:field name="ios"><js:doc><![CDATA[The iOS-specific image instance. Will be undefined when running on Android.]]></js:doc><js:type-annotation><js:type name="UIImage"/></js:type-annotation></js:field><js:field name="android"><js:doc><![CDATA[The Android-specific image instance. Will be undefined when running on iOS.]]></js:doc><js:type-annotation><js:type name="android.graphics:Bitmap"/></js:type-annotation></js:field><js:method name="loadFromResource"><js:doc><![CDATA[Loads this instance from the specified resource name.]]></js:doc><js:param name="name"><js:doc><![CDATA[The name of the resource (without its extension).]]></js:doc><js:type-annotation><js:string/></js:type-annotation></js:param><js:returns><js:boolean/></js:returns></js:method><js:method name="loadFromFile"><js:doc><![CDATA[Loads this instance from the specified file.]]></js:doc><js:param name="path"><js:doc><![CDATA[The location of the file on the file system.]]></js:doc><js:type-annotation><js:string/></js:type-annotation></js:param><js:returns><js:boolean/></js:returns></js:method><js:method name="loadFromData"><js:doc><![CDATA[Loads this instance from the specified native image data.]]></js:doc><js:param name="data"><js:doc><![CDATA[The native data (byte array) to load the image from. This will be either Stream for Android or NSData for iOS.]]></js:doc><js:type-annotation><js:object/></js:type-annotation></js:param><js:returns><js:boolean/></js:returns></js:method><js:method name="setNativeSource"><js:doc><![CDATA[Sets the provided native source object (typically a Bitmap).
This will update either the android or ios properties, depending on the target os.]]></js:doc><js:param name="source"><js:doc><![CDATA[The native image object. Will be either a Bitmap for Android or a UIImage for iOS.]]></js:doc><js:type-annotation><js:object/></js:type-annotation></js:param><js:returns><js:boolean/></js:returns></js:method><js:method name="saveToFile"><js:doc><![CDATA[Saves this instance to the specified file, using the provided image format and quality.]]></js:doc><js:param name="path"><js:doc><![CDATA[The path of the file on the file system to save to.]]></js:doc><js:type-annotation><js:string/></js:type-annotation></js:param><js:param name="format"><js:doc><![CDATA[The format (encoding) of the image.]]></js:doc><js:type-annotation><js:type name="&quot;image-source&quot;:ImageFormat"/></js:type-annotation></js:param><js:param name="quality" optional="true"><js:doc><![CDATA[Optional parameter, specifying the quality of the encoding. Defaults to the maximum available quality.]]></js:doc><js:type-annotation><js:number/></js:type-annotation></js:param><js:returns><js:boolean/></js:returns></js:method></js:class><js:function name="fromResource"><js:doc><![CDATA[Creates a new ImageSource instance and loads it from the specified resource name.]]></js:doc><js:param name="name"><js:doc><![CDATA[The name of the resource (without its extension).]]></js:doc><js:type-annotation><js:string/></js:type-annotation></js:param><js:returns><js:type name="&quot;image-source&quot;:ImageSource"/></js:returns></js:function><js:function name="fromFile"><js:doc><![CDATA[Creates a new ImageSource instance and loads it from the specified file.]]></js:doc><js:param name="path"><js:doc><![CDATA[The location of the file on the file system.]]></js:doc><js:type-annotation><js:string/></js:type-annotation></js:param><js:returns><js:type name="&quot;image-source&quot;:ImageSource"/></js:returns></js:function><js:function name="fromData"><js:doc><![CDATA[Creates a new ImageSource instance and loads it from the specified resource name.]]></js:doc><js:param name="data"><js:doc><![CDATA[The native data (byte array) to load the image from. This will be either Stream for Android or NSData for iOS.]]></js:doc><js:type-annotation><js:object/></js:type-annotation></js:param><js:returns><js:type name="&quot;image-source&quot;:ImageSource"/></js:returns></js:function><js:function name="fromNativeSource"><js:doc><![CDATA[Creates a new ImageSource instance and sets the provided native source object (typically a Bitmap).
The native source object will update either the android or ios properties, depending on the target os.]]></js:doc><js:param name="source"><js:doc><![CDATA[The native image object. Will be either a Bitmap for Android or a UIImage for iOS.]]></js:doc><js:type-annotation><js:object/></js:type-annotation></js:param><js:returns><js:type name="&quot;image-source&quot;:ImageSource"/></js:returns></js:function><js:function name="fromUrl"><js:doc><![CDATA[Downloads the image from the provided Url and creates a new ImageSource instance from it.]]></js:doc><js:param name="url"><js:doc><![CDATA[The link to the remote image object. This operation will download and decode the image.]]></js:doc><js:type-annotation><js:string/></js:type-annotation></js:param><js:returns><js:type name="Promise"><js:type name="&quot;image-source&quot;:ImageSource"/></js:type></js:returns></js:function></js:module><js:module qname="&quot;location&quot;"><js:enum qname="&quot;location&quot;:Accuracy"><js:doc><![CDATA[Specifies common accuracy values.]]></js:doc><js:member name="ANY" value="300"><js:doc><![CDATA[The default accuracy. About 300 meters.]]></js:doc></js:member><js:member name="HIGH" value="3"><js:doc><![CDATA[High accuracy. About 3 meters.]]></js:doc></js:member></js:enum><js:class qname="&quot;location&quot;:Location"><js:doc><![CDATA[A data class that encapsulates common properties for a geolocation.]]></js:doc><js:field name="latitude"><js:doc><![CDATA[The latitude of the geolocation, in degrees.]]></js:doc><js:type-annotation><js:number/></js:type-annotation></js:field><js:field name="longitude"><js:doc><![CDATA[The longitude of the geolocation, in degrees.]]></js:doc><js:type-annotation><js:number/></js:type-annotation></js:field><js:field name="altitude"><js:doc><![CDATA[The altitude (if available), in meters above sea level.]]></js:doc><js:type-annotation><js:number/></js:type-annotation></js:field><js:field name="horizontalAccuracy"><js:doc><![CDATA[The horizontal accuracy, in meters.]]></js:doc><js:type-annotation><js:number/></js:type-annotation></js:field><js:field name="verticalAccuracy"><js:doc><![CDATA[The vertical accuracy, in meters.]]></js:doc><js:type-annotation><js:number/></js:type-annotation></js:field><js:field name="speed"><js:doc><![CDATA[The speed, in meters/second over ground.]]></js:doc><js:type-annotation><js:number/></js:type-annotation></js:field><js:field name="direction"><js:doc><![CDATA[The direction (course), in degrees.]]></js:doc><js:type-annotation><js:number/></js:type-annotation></js:field><js:field name="timestamp"><js:doc><![CDATA[The time at which this location was determined.]]></js:doc><js:type-annotation><js:type name="Date"/></js:type-annotation></js:field><js:field name="android"><js:doc><![CDATA[The android-specific location object.]]></js:doc><js:type-annotation><js:type name="android.location:Location"/></js:type-annotation></js:field><js:field name="ios"><js:doc><![CDATA[The ios-specific location object.]]></js:doc><js:type-annotation><js:type name="CLLocation"/></js:type-annotation></js:field></js:class><js:interface qname="&quot;location&quot;:Options"><js:doc><![CDATA[Provides options for location monitoring.]]></js:doc><js:property name="desiredAccuracy" optional="true"><js:doc><![CDATA[Specifies desired accuracy in meters. Defaults to DesiredAccuracy.HIGH]]></js:doc><js:type-annotation><js:number/></js:type-annotation></js:property><js:property name="updateDistance" optional="true"><js:doc><![CDATA[Update distance filter in meters. Specifies how often to update. Default on iOS is no filter, on Android it is 0 meters]]></js:doc><js:type-annotation><js:number/></js:type-annotation></js:property><js:property name="minimumUpdateTime" optional="true"><js:doc><![CDATA[Minimum time interval between location updates, in milliseconds (ignored on iOS)]]></js:doc><js:type-annotation><js:number/></js:type-annotation></js:property><js:property name="maximumAge" optional="true"><js:doc><![CDATA[how old locations to receive in ms.]]></js:doc><js:type-annotation><js:number/></js:type-annotation></js:property><js:property name="timeout" optional="true"><js:doc><![CDATA[how long to wait for a location in ms.]]></js:doc><js:type-annotation><js:number/></js:type-annotation></js:property></js:interface><js:class qname="&quot;location&quot;:LocationManager"><js:doc><![CDATA[Provides methods for querying geolocation (in case available) on the target platform.]]></js:doc><js:method name="isEnabled" modifier="static"><js:doc><![CDATA[Checks whether the location services are switched ON for this device (on Android) or application (iOS).]]></js:doc><js:returns><js:boolean/></js:returns></js:method><js:method name="distance" modifier="static"><js:doc><![CDATA[Measures the distance in meters between two locations.]]></js:doc><js:param name="loc1"><js:doc><![CDATA[The first location.]]></js:doc><js:type-annotation><js:type name="&quot;location&quot;:Location"/></js:type-annotation></js:param><js:param name="loc2"><js:doc><![CDATA[The second location.]]></js:doc><js:type-annotation><js:type name="&quot;location&quot;:Location"/></js:type-annotation></js:param><js:returns><js:number/></js:returns></js:method><js:field name="desiredAccuracy"><js:doc><![CDATA[The desired accuracy in meters. Defaults to DesiredAccuracy.HIGH]]></js:doc><js:type-annotation><js:number/></js:type-annotation></js:field><js:field name="updateDistance"><js:doc><![CDATA[The update distance filter in meters. Specifies how often to update. Default on iOS is no filter, on Android it is 0 meters.]]></js:doc><js:type-annotation><js:number/></js:type-annotation></js:field><js:field name="minimumUpdateTime"><js:doc><![CDATA[The minimum time interval between subsequent location updates, in milliseconds (ignored on iOS).]]></js:doc><js:type-annotation><js:number/></js:type-annotation></js:field><js:field name="isStarted"><js:doc><![CDATA[True if the location listener is already started. In this case all other start requests will be ignored.]]></js:doc><js:type-annotation><js:boolean/></js:type-annotation></js:field><js:method name="startLocationMonitoring"><js:doc><![CDATA[Starts location monitoring.]]></js:doc><js:param name="onLocation"><js:doc><![CDATA[A function that will be called upon every location update received.]]></js:doc><js:type-annotation><js:function><js:param name="location"><js:type-annotation><js:type name="&quot;location&quot;:Location"/></js:type-annotation></js:param><js:returns><js:object/></js:returns></js:function></js:type-annotation></js:param><js:param name="onError" optional="true"><js:doc><![CDATA[An optional error callback.]]></js:doc><js:type-annotation><js:function><js:param name="error"><js:type-annotation><js:type name="Error"/></js:type-annotation></js:param><js:returns><js:object/></js:returns></js:function></js:type-annotation></js:param><js:param name="options" optional="true"><js:doc><![CDATA[An optional object specifying location update settings.]]></js:doc><js:type-annotation><js:type name="&quot;location&quot;:Options"/></js:type-annotation></js:param></js:method><js:method name="stopLocationMonitoring"><js:doc><![CDATA[Stops location monitoring.]]></js:doc></js:method><js:field name="lastKnownLocation"><js:doc><![CDATA[Returns last known location from device's location services or null of no known last location.]]></js:doc><js:type-annotation><js:type name="&quot;location&quot;:Location"/></js:type-annotation></js:field></js:class><js:function name="getLocation"><js:doc><![CDATA[Fires a single shot location search. If you specify timeout in options, location search will fail on timeout. 
If you specify timeout = 0 it just requests the last known location.
However if you specify maximumAge and the location received is older it won't be received.]]></js:doc><js:param name="options" optional="true"><js:doc><![CDATA[An optional object specifying location update settings.]]></js:doc><js:type-annotation><js:type name="&quot;location&quot;:Options"/></js:type-annotation></js:param><js:returns><js:type name="Promise"><js:type name="&quot;location&quot;:Location"/></js:type></js:returns></js:function></js:module><js:module qname="&quot;text&quot;"><js:module qname="&quot;text&quot;:encoding"><js:var name="ISO_8859_1"><js:type-annotation><js:object/></js:type-annotation></js:var><js:var name="US_ASCII"><js:type-annotation><js:object/></js:type-annotation></js:var><js:var name="UTF_16"><js:type-annotation><js:object/></js:type-annotation></js:var><js:var name="UTF_16BE"><js:type-annotation><js:object/></js:type-annotation></js:var><js:var name="UTF_16LE"><js:type-annotation><js:object/></js:type-annotation></js:var><js:var name="UTF_8"><js:type-annotation><js:object/></js:type-annotation></js:var></js:module></js:module><js:module qname="&quot;trace&quot;"><js:function name="enable"><js:doc><![CDATA[Enables the trace module.]]></js:doc></js:function><js:function name="disable"><js:doc><![CDATA[Disables the trace module.]]></js:doc></js:function><js:function name="addWriter"><js:doc><![CDATA[Adds a TraceWriter instance to the trace module.]]></js:doc><js:param name="writer"><js:doc><![CDATA[The TraceWriter instance to add.]]></js:doc><js:type-annotation><js:type name="&quot;trace&quot;:TraceWriter"/></js:type-annotation></js:param></js:function><js:function name="removeWriter"><js:doc><![CDATA[Removes a TraceWriter instance from the trace module.]]></js:doc><js:param name="writer"><js:doc><![CDATA[The TraceWriter instance to remove.]]></js:doc><js:type-annotation><js:type name="&quot;trace&quot;:TraceWriter"/></js:type-annotation></js:param></js:function><js:function name="clearWriters"><js:doc><![CDATA[Clears all the writers from the trace module.]]></js:doc></js:function><js:function name="setCategories"><js:doc><![CDATA[Sets the categories the module will trace.]]></js:doc><js:param name="categories"><js:doc><![CDATA[The comma-separated list of categories. If not specified all messages from all categories will be traced.]]></js:doc><js:type-annotation><js:string/></js:type-annotation></js:param></js:function><js:function name="write"><js:doc><![CDATA[Writes a message using the available writers.]]></js:doc><js:param name="message"><js:doc><![CDATA[The message to be written.]]></js:doc><js:type-annotation><js:object/></js:type-annotation></js:param><js:param name="category"><js:doc><![CDATA[The category of the message.]]></js:doc><js:type-annotation><js:string/></js:type-annotation></js:param><js:param name="type" optional="true"><js:doc><![CDATA[Optional, the type of the message - info, warning, error.]]></js:doc><js:type-annotation><js:number/></js:type-annotation></js:param></js:function><js:function name="notifyEvent"><js:doc><![CDATA[Notifies all the attached listeners for an event that has occurred in the sender object.]]></js:doc><js:param name="object"><js:doc><![CDATA[The Object instance that raised the event.]]></js:doc><js:type-annotation><js:type name="Object"/></js:type-annotation></js:param><js:param name="name"><js:doc><![CDATA[The name of the raised event.]]></js:doc><js:type-annotation><js:string/></js:type-annotation></js:param><js:param name="data" optional="true"><js:doc><![CDATA[An optional parameter that passes the data associated with the event.]]></js:doc><js:type-annotation><js:object/></js:type-annotation></js:param></js:function><js:function name="addEventListener"><js:param name="listener"><js:type-annotation><js:type name="&quot;trace&quot;:EventListener"/></js:type-annotation></js:param></js:function><js:function name="removeEventListener"><js:param name="listener"><js:type-annotation><js:type name="&quot;trace&quot;:EventListener"/></js:type-annotation></js:param></js:function><js:module qname="&quot;trace&quot;:categories"><js:var name="VisualTreeEvents"><js:type-annotation><js:string/></js:type-annotation></js:var><js:var name="Layout"><js:type-annotation><js:string/></js:type-annotation></js:var><js:var name="Style"><js:type-annotation><js:string/></js:type-annotation></js:var><js:var name="ViewHierarchy"><js:type-annotation><js:string/></js:type-annotation></js:var><js:var name="NativeLifecycle"><js:type-annotation><js:string/></js:type-annotation></js:var><js:var name="Debug"><js:type-annotation><js:string/></js:type-annotation></js:var><js:var name="Navigation"><js:type-annotation><js:string/></js:type-annotation></js:var><js:var name="Test"><js:type-annotation><js:string/></js:type-annotation></js:var><js:var name="All"><js:type-annotation><js:string/></js:type-annotation></js:var><js:var name="separator"><js:type-annotation><js:string/></js:type-annotation></js:var><js:function name="concat"><js:param name="categories" rest="true"><js:type-annotation><js:array><js:string/></js:array></js:type-annotation></js:param><js:returns><js:string/></js:returns></js:function></js:module><js:module qname="&quot;trace&quot;:messageType"><js:var name="log"><js:type-annotation><js:number/></js:type-annotation></js:var><js:var name="info"><js:type-annotation><js:number/></js:type-annotation></js:var><js:var name="warn"><js:type-annotation><js:number/></js:type-annotation></js:var><js:var name="error"><js:type-annotation><js:number/></js:type-annotation></js:var></js:module><js:interface qname="&quot;trace&quot;:TraceWriter"><js:method name="write"><js:param name="message"><js:type-annotation><js:object/></js:type-annotation></js:param><js:param name="category"><js:type-annotation><js:string/></js:type-annotation></js:param><js:param name="type" optional="true"><js:type-annotation><js:number/></js:type-annotation></js:param></js:method></js:interface><js:interface qname="&quot;trace&quot;:EventListener"><js:property name="filter"><js:type-annotation><js:string/></js:type-annotation></js:property><js:method name="on"><js:param name="object"><js:type-annotation><js:type name="Object"/></js:type-annotation></js:param><js:param name="name"><js:type-annotation><js:string/></js:type-annotation></js:param><js:param name="data" optional="true"><js:type-annotation><js:object/></js:type-annotation></js:param></js:method></js:interface></js:module><js:module qname="&quot;ui/content-view&quot;"><js:class qname="&quot;ui/content-view&quot;:ContentView"><js:doc><![CDATA[Represents a View that has a single child - content.
The View itself does not have visual representation and serves as a placeholder for its content in the logical tree.]]></js:doc><js:extends><js:type name="&quot;ui/core/view&quot;:View"/></js:extends><js:field name="content"><js:doc><![CDATA[Gets or sets the single child of the view.]]></js:doc><js:type-annotation><js:type name="&quot;ui/core/view&quot;:View"/></js:type-annotation></js:field><js:method name="_onContentChanged"><js:doc><![CDATA[Called when the content property has changed.]]></js:doc><js:param name="oldView"><js:doc><![CDATA[The previous content.]]></js:doc><js:type-annotation><js:type name="&quot;ui/core/view&quot;:View"/></js:type-annotation></js:param><js:param name="newView"><js:doc><![CDATA[The new content.]]></js:doc><js:type-annotation><js:type name="&quot;ui/core/view&quot;:View"/></js:type-annotation></js:param></js:method></js:class></js:module><js:module qname="&quot;ui/core/bindable&quot;"><js:interface qname="&quot;ui/core/bindable&quot;:BindingOptions"><js:doc><![CDATA[The options object used in the Bindable.bind method.]]></js:doc><js:property name="sourceProperty"><js:doc><![CDATA[The property name of the source object (typically the ViewModel) to bind to.]]></js:doc><js:type-annotation><js:string/></js:type-annotation></js:property><js:property name="targetProperty"><js:doc><![CDATA[The property name of the target object (that is the Bindable instance) to bind the source property to.]]></js:doc><js:type-annotation><js:string/></js:type-annotation></js:property><js:property name="twoWay" optional="true"><js:doc><![CDATA[True to establish a two-way binding, false otherwise. A two-way binding will synchronize both the source and the target property values regardless of which one initiated the change.]]></js:doc><js:type-annotation><js:boolean/></js:type-annotation></js:property></js:interface><js:var name="bindingContextProperty"><js:type-annotation><js:type name="&quot;ui/core/dependency-observable&quot;:Property"/></js:type-annotation></js:var><js:class qname="&quot;ui/core/bindable&quot;:Bindable"><js:doc><![CDATA[Represents an extended DependencyObservable object that supports data-binding.]]></js:doc><js:extends><js:type name="&quot;ui/core/dependency-observable&quot;:DependencyObservable"/></js:extends><js:field name="bindingContext"><js:doc><![CDATA[Gets or sets the binding context of this instance. This object is used as a source for each Binding that does not have a source object specified.]]></js:doc><js:type-annotation><js:object/></js:type-annotation></js:field><js:method name="bind"><js:doc><![CDATA[Establishes a binding between the source object and this Bindable instance.]]></js:doc><js:param name="options"><js:doc><![CDATA[The options for the binding.]]></js:doc><js:type-annotation><js:type name="&quot;ui/core/bindable&quot;:BindingOptions"/></js:type-annotation></js:param><js:param name="source" optional="true"><js:doc><![CDATA[An optional parameter, specifying the source object to bind to. If no source is specified the bindingContext value (if any) will be used as a source.]]></js:doc><js:type-annotation><js:type name="Object"/></js:type-annotation></js:param></js:method><js:method name="unbind"><js:doc><![CDATA[Removes the existing binding (if any) for the specified property.]]></js:doc><js:param name="property"><js:doc><![CDATA[The name of the property to unbind.]]></js:doc><js:type-annotation><js:string/></js:type-annotation></js:param></js:method><js:method name="_updateTwoWayBinding"><js:param name="propertyName"><js:type-annotation><js:string/></js:type-annotation></js:param><js:param name="value"><js:type-annotation><js:object/></js:type-annotation></js:param></js:method><js:method name="_onBindingContextChanged"><js:param name="oldValue"><js:type-annotation><js:object/></js:type-annotation></js:param><js:param name="newValue"><js:type-annotation><js:object/></js:type-annotation></js:param></js:method></js:class></js:module><js:module qname="&quot;ui/core/dependency-observable&quot;"><js:class qname="&quot;ui/core/dependency-observable&quot;:Property"><js:doc><![CDATA[Represents a special Property which supports changed callback, metadata and value validation.]]></js:doc><js:field name="name"><js:doc><![CDATA[Gets the name of the property. This is a read-only property.]]></js:doc><js:type-annotation><js:string/></js:type-annotation></js:field><js:field name="id"><js:doc><![CDATA[Gets the id of the property. This is used for fast lookup. This is a read-only property.]]></js:doc><js:type-annotation><js:number/></js:type-annotation></js:field><js:field name="metadata"><js:doc><![CDATA[Gets the PropertyMetadata object associated with the property. This is a read-only property.]]></js:doc><js:type-annotation><js:type name="&quot;ui/core/dependency-observable&quot;:PropertyMetadata"/></js:type-annotation></js:field></js:class><js:class qname="&quot;ui/core/dependency-observable&quot;:PropertyMetadata"><js:doc><![CDATA[Represents an Object that describes a Property instance.]]></js:doc><js:field name="options"><js:doc><![CDATA[Gets the options parameter passed to the constructor of this instance. This is a read-only property.]]></js:doc><js:type-annotation><js:number/></js:type-annotation></js:field><js:field name="defaultValue"><js:doc><![CDATA[Gets the default value parameter passed to the constructor of this instance. This is a read-only property.]]></js:doc><js:type-annotation><js:object/></js:type-annotation></js:field><js:field name="onValueChanged"><js:doc><![CDATA[Gets or sets the callback to be raised whenever the associated property changes for any DependencyObservable instance that uses the property to store a value.]]></js:doc><js:type-annotation><js:type name="&quot;ui/core/dependency-observable&quot;:PropertyChangedCallback"/></js:type-annotation></js:field><js:field name="onValidateValue"><js:doc><![CDATA[Gets or sets the callback to be raised whenever the associated property is about to change for any DependencyObservable instance that uses the property to store a value.]]></js:doc><js:type-annotation><js:type name="&quot;ui/core/dependency-observable&quot;:PropertyValidateValueCallback"/></js:type-annotation></js:field><js:field name="affectsMeasure"><js:doc><![CDATA[Checks whether the PropertyMetadataOptions.AffectsMeasure bit is present in the options value.]]></js:doc><js:type-annotation><js:boolean/></js:type-annotation></js:field><js:field name="affectsArrange"><js:doc><![CDATA[Checks whether the PropertyMetadataOptions.AffectsArrange bit is present in the options value.]]></js:doc><js:type-annotation><js:boolean/></js:type-annotation></js:field><js:field name="affectsParentMeasure"><js:doc><![CDATA[Checks whether the PropertyMetadataOptions.AffectsParentMeasure bit is present in the options value.]]></js:doc><js:type-annotation><js:boolean/></js:type-annotation></js:field><js:field name="affectsParentArrange"><js:doc><![CDATA[Checks whether the PropertyMetadataOptions.AffectsParentArrange bit is present in the options value.]]></js:doc><js:type-annotation><js:boolean/></js:type-annotation></js:field><js:field name="inheritable"><js:doc><![CDATA[Checks whether the PropertyMetadataOptions.Inheritable bit is present in the options value.]]></js:doc><js:type-annotation><js:boolean/></js:type-annotation></js:field><js:field name="affectsStyle"><js:doc><![CDATA[Checks whether the PropertyMetadataOptions.AffectsStyle bit is present in the options value.]]></js:doc><js:type-annotation><js:boolean/></js:type-annotation></js:field></js:class><js:interface qname="&quot;ui/core/dependency-observable&quot;:PropertyChangeData"><js:doc><![CDATA[The data for the event raised when a value of a Property changes for a DependencyObservable instance.]]></js:doc><js:extends><js:type name="&quot;data/observable&quot;:EventData"/></js:extends><js:property name="property"><js:doc><![CDATA[The Property associated with the change.]]></js:doc><js:type-annotation><js:type name="&quot;ui/core/dependency-observable&quot;:Property"/></js:type-annotation></js:property><js:property name="oldValue"><js:doc><![CDATA[The old property value.]]></js:doc><js:type-annotation><js:object/></js:type-annotation></js:property><js:property name="newValue"><js:doc><![CDATA[The new property value.]]></js:doc><js:type-annotation><js:object/></js:type-annotation></js:property></js:interface><js:interface qname="&quot;ui/core/dependency-observable&quot;:PropertyChangedCallback"><js:doc><![CDATA[Defines the signature of the function that handles the propertyChanged event.]]></js:doc><js:param name="data"><js:type-annotation><js:type name="&quot;ui/core/dependency-observable&quot;:PropertyChangeData"/></js:type-annotation></js:param></js:interface><js:interface qname="&quot;ui/core/dependency-observable&quot;:PropertyValidateValueCallback"><js:doc><![CDATA[Defines the signature of the function that handles the validateValue event.]]></js:doc><js:param name="value"><js:type-annotation><js:object/></js:type-annotation></js:param><js:returns><js:boolean/></js:returns></js:interface><js:class qname="&quot;ui/core/dependency-observable&quot;:PropertyEntry"><js:doc><![CDATA[Represents an Object that is used to back a value for a Property in a DependencyObservable Object instance.]]></js:doc><js:method name="resetValue"><js:doc><![CDATA[Resets effective value and all the modifiers available for this entry.]]></js:doc></js:method><js:field name="property"><js:doc><![CDATA[Gets the Property instance this entry is associated with. This is a read-only property.]]></js:doc><js:type-annotation><js:type name="&quot;ui/core/dependency-observable&quot;:Property"/></js:type-annotation></js:field><js:field name="effectiveValue"><js:doc><![CDATA[Gets the effective value of this entry.
The value is composed depending on the current valueSource value, using the following priority:
    1. VisualState
    2. Local
    3. Css
    4. Inherited
    5. Default]]></js:doc><js:type-annotation><js:object/></js:type-annotation></js:field><js:field name="valueSource"><js:doc><![CDATA[Gets the source of the current effective value for this entry. The available options for this property are defined in the ValueSource namespace.]]></js:doc><js:type-annotation><js:number/></js:type-annotation></js:field><js:field name="localValue"><js:doc><![CDATA[Gets or sets the local value for this entry. This will trigger re-evaluation of the current effective value.]]></js:doc><js:type-annotation><js:object/></js:type-annotation></js:field><js:field name="inheritedValue"><js:doc><![CDATA[Gets or sets the inherited value for this entry. This will trigger re-evaluation of the current effective value.]]></js:doc><js:type-annotation><js:object/></js:type-annotation></js:field><js:field name="cssValue"><js:doc><![CDATA[Gets or sets the css value for this entry. This will trigger re-evaluation of the current effective value.]]></js:doc><js:type-annotation><js:object/></js:type-annotation></js:field><js:field name="visualStateValue"><js:doc><![CDATA[Gets or sets the visual-state value for this entry. This will trigger re-evaluation of the current effective value.]]></js:doc><js:type-annotation><js:object/></js:type-annotation></js:field></js:class><js:class qname="&quot;ui/core/dependency-observable&quot;:DependencyObservable"><js:doc><![CDATA[Represents an extended Observable Object that uses Property instances for value backing mechanism.
This routine allows for various value modifiers per Property, which is used for inheritance, data-binding and styling purposes.]]></js:doc><js:extends><js:type name="&quot;data/observable&quot;:Observable"/></js:extends><js:method name="_getValue"><js:param name="property"><js:type-annotation><js:type name="&quot;ui/core/dependency-observable&quot;:Property"/></js:type-annotation></js:param><js:returns><js:object/></js:returns></js:method><js:method name="_getValueSource"><js:param name="property"><js:type-annotation><js:type name="&quot;ui/core/dependency-observable&quot;:Property"/></js:type-annotation></js:param><js:returns><js:number/></js:returns></js:method><js:method name="_setValue"><js:param name="property"><js:type-annotation><js:type name="&quot;ui/core/dependency-observable&quot;:Property"/></js:type-annotation></js:param><js:param name="value"><js:type-annotation><js:object/></js:type-annotation></js:param><js:param name="source" optional="true"><js:type-annotation><js:number/></js:type-annotation></js:param></js:method><js:method name="_resetValue"><js:param name="property"><js:type-annotation><js:type name="&quot;ui/core/dependency-observable&quot;:Property"/></js:type-annotation></js:param><js:param name="source" optional="true"><js:type-annotation><js:number/></js:type-annotation></js:param></js:method><js:method name="_onPropertyChanged"><js:param name="property"><js:type-annotation><js:type name="&quot;ui/core/dependency-observable&quot;:Property"/></js:type-annotation></js:param><js:param name="oldValue"><js:type-annotation><js:object/></js:type-annotation></js:param><js:param name="newValue"><js:type-annotation><js:object/></js:type-annotation></js:param></js:method><js:method name="_eachSetProperty"><js:doc><![CDATA[Iterates all the properties which have a PropertyEntry registered for this instance.]]></js:doc><js:param name="callback"><js:type-annotation><js:function><js:param name="property"><js:type-annotation><js:type name="&quot;ui/core/dependency-observable&quot;:Property"/></js:type-annotation></js:param><js:returns><js:boolean/></js:returns></js:function></js:type-annotation></js:param></js:method></js:class><js:module qname="&quot;ui/core/dependency-observable&quot;:PropertyMetadataOptions"><js:doc><![CDATA[Lists the possible values for the PropertyMetadata.options property. Each actual numeric value is a power of two allowing for bitwise operations.]]></js:doc><js:var name="None"><js:type-annotation><js:number/></js:type-annotation></js:var><js:var name="AffectsMeasure"><js:type-annotation><js:number/></js:type-annotation></js:var><js:var name="AffectsArrange"><js:type-annotation><js:number/></js:type-annotation></js:var><js:var name="AffectsParentMeasure"><js:type-annotation><js:number/></js:type-annotation></js:var><js:var name="AffectsParentArrange"><js:type-annotation><js:number/></js:type-annotation></js:var><js:var name="Inheritable"><js:type-annotation><js:number/></js:type-annotation></js:var><js:var name="AffectsStyle"><js:type-annotation><js:number/></js:type-annotation></js:var></js:module><js:module qname="&quot;ui/core/dependency-observable&quot;:ValueSource"><js:doc><![CDATA[Lists the possible values for the PropertyEntry.valueSource property.]]></js:doc><js:var name="Default"><js:type-annotation><js:number/></js:type-annotation></js:var><js:var name="Inherited"><js:type-annotation><js:number/></js:type-annotation></js:var><js:var name="Css"><js:type-annotation><js:number/></js:type-annotation></js:var><js:var name="Local"><js:type-annotation><js:number/></js:type-annotation></js:var><js:var name="VisualState"><js:type-annotation><js:number/></js:type-annotation></js:var></js:module></js:module><js:module qname="&quot;ui/image-cache&quot;"><js:interface qname="&quot;ui/image-cache&quot;:DownloadRequest"><js:doc><![CDATA[Represents a single download request.]]></js:doc><js:property name="url"><js:doc><![CDATA[The url of the image.]]></js:doc><js:type-annotation><js:string/></js:type-annotation></js:property><js:property name="key"><js:doc><![CDATA[The key used to cache the image.]]></js:doc><js:type-annotation><js:string/></js:type-annotation></js:property><js:property name="completed" optional="true"><js:doc><![CDATA[An optional function to be called when the download is complete.]]></js:doc><js:type-annotation><js:function><js:param name="result"><js:type-annotation><js:type name="&quot;image-source&quot;:ImageSource"/></js:type-annotation></js:param><js:param name="key"><js:type-annotation><js:string/></js:type-annotation></js:param></js:function></js:type-annotation></js:property></js:interface><js:class qname="&quot;ui/image-cache&quot;:Cache"><js:doc><![CDATA[Represents a class that stores handles image download requests and caches the already downloaded images.]]></js:doc><js:extends><js:type name="&quot;data/observable&quot;:Observable"/></js:extends><js:field name="invalid"><js:doc><![CDATA[The image to be used when the requested url is invalid or the result may not be decoded.]]></js:doc><js:type-annotation><js:type name="&quot;image-source&quot;:ImageSource"/></js:type-annotation></js:field><js:field name="placeholder"><js:doc><![CDATA[The image to be used to notify for a pending download request - e.g. loading indicator.]]></js:doc><js:type-annotation><js:type name="&quot;image-source&quot;:ImageSource"/></js:type-annotation></js:field><js:field name="maxRequests"><js:doc><![CDATA[The maximum number of simultaneous download requests. Defaults to 5.]]></js:doc><js:type-annotation><js:number/></js:type-annotation></js:field><js:method name="enableDownload"><js:doc><![CDATA[Enables previously suspended download requests.]]></js:doc></js:method><js:method name="disableDownload"><js:doc><![CDATA[Temporary disables download requests.]]></js:doc></js:method><js:method name="push"><js:doc><![CDATA[Adds a new download request at the top of the download queue. This will be the next immediate download to start.]]></js:doc><js:param name="request"><js:type-annotation><js:type name="&quot;ui/image-cache&quot;:DownloadRequest"/></js:type-annotation></js:param></js:method><js:method name="enqueue"><js:doc><![CDATA[Adds a new download request at the end of the download queue. This will be the last download to start.]]></js:doc><js:param name="request"><js:type-annotation><js:type name="&quot;ui/image-cache&quot;:DownloadRequest"/></js:type-annotation></js:param></js:method><js:method name="get"><js:doc><![CDATA[Gets the image for the specified key. May be undefined if the key is not present in the cache.]]></js:doc><js:param name="key"><js:type-annotation><js:string/></js:type-annotation></js:param><js:returns><js:type name="&quot;image-source&quot;:ImageSource"/></js:returns></js:method><js:method name="set"><js:doc><![CDATA[Sets the image for the specified key.]]></js:doc><js:param name="key"><js:type-annotation><js:string/></js:type-annotation></js:param><js:param name="source"><js:type-annotation><js:type name="&quot;image-source&quot;:ImageSource"/></js:type-annotation></js:param></js:method><js:method name="remove"><js:doc><![CDATA[Removes the cache for the specified key.]]></js:doc><js:param name="key"><js:type-annotation><js:string/></js:type-annotation></js:param></js:method><js:method name="clear"><js:doc><![CDATA[Removes all the previously cached images.]]></js:doc></js:method><js:method name="_downloadCore"><js:param name="request"><js:type-annotation><js:type name="&quot;ui/image-cache&quot;:DownloadRequest"/></js:type-annotation></js:param></js:method><js:method name="_onDownloadCompleted"><js:param name="key"><js:type-annotation><js:string/></js:type-annotation></js:param><js:param name="result"><js:type-annotation><js:type name="&quot;image-source&quot;:ImageSource"/></js:type-annotation></js:param></js:method></js:class><js:module qname="&quot;ui/image-cache&quot;:knownEvents"><js:var name="downloaded"><js:type-annotation><js:string/></js:type-annotation></js:var></js:module><js:interface qname="&quot;ui/image-cache&quot;:DownloadedData"><js:extends><js:type name="&quot;data/observable&quot;:EventData"/></js:extends><js:property name="key"><js:type-annotation><js:string/></js:type-annotation></js:property><js:property name="image"><js:type-annotation><js:type name="&quot;image-source&quot;:ImageSource"/></js:type-annotation></js:property></js:interface></js:module><js:module qname="&quot;ui/panels/panel&quot;"><js:class qname="&quot;ui/panels/panel&quot;:Panel"><js:doc><![CDATA[Base class for all layout panels.]]></js:doc><js:extends><js:type name="&quot;ui/core/view&quot;:View"/></js:extends><js:field name="_children"><js:doc><![CDATA[Returns an Array of children.]]></js:doc><js:type-annotation><js:type name="Array"><js:type name="&quot;ui/core/view&quot;:View"/></js:type></js:type-annotation></js:field><js:method name="addChild"><js:doc><![CDATA[Adds the view to children array.]]></js:doc><js:param name="view"><js:doc><![CDATA[The view to be added to the end of the children array.]]></js:doc><js:type-annotation><js:type name="&quot;ui/core/view&quot;:View"/></js:type-annotation></js:param></js:method><js:method name="removeChild"><js:doc><![CDATA[Removes the specified view from the children array.]]></js:doc><js:param name="view"><js:doc><![CDATA[The view to remove from the children array.]]></js:doc><js:type-annotation><js:type name="&quot;ui/core/view&quot;:View"/></js:type-annotation></js:param></js:method></js:class><js:class qname="&quot;ui/panels/panel&quot;:NativePanel"><js:extends><js:type name="android.view:ViewGroup"/></js:extends></js:class></js:module><js:module qname="&quot;ui/core/view&quot;"><js:function name="getViewById"><js:param name="view"><js:type-annotation><js:type name="&quot;ui/core/view&quot;:View"/></js:type-annotation></js:param><js:param name="id"><js:type-annotation><js:string/></js:type-annotation></js:param><js:returns><js:type name="&quot;ui/core/view&quot;:View"/></js:returns></js:function><js:function name="eachDescendant"><js:param name="view"><js:type-annotation><js:type name="&quot;ui/core/view&quot;:View"/></js:type-annotation></js:param><js:param name="callback"><js:type-annotation><js:function><js:param name="child"><js:type-annotation><js:type name="&quot;ui/core/view&quot;:View"/></js:type-annotation></js:param><js:returns><js:boolean/></js:returns></js:function></js:type-annotation></js:param></js:function><js:function name="getAncestor"><js:param name="view"><js:type-annotation><js:type name="&quot;ui/core/view&quot;:View"/></js:type-annotation></js:param><js:param name="typeName"><js:type-annotation><js:string/></js:type-annotation></js:param><js:returns><js:type name="&quot;ui/core/view&quot;:View"/></js:returns></js:function><js:module qname="&quot;ui/core/view&quot;:knownEvents"><js:var name="loaded"><js:type-annotation><js:string/></js:type-annotation></js:var><js:var name="unloaded"><js:type-annotation><js:string/></js:type-annotation></js:var></js:module><js:interface qname="&quot;ui/core/view&quot;:Options"><js:property name="width" optional="true"><js:doc><![CDATA[Gets or sets the width of the view.]]></js:doc><js:type-annotation><js:number/></js:type-annotation></js:property><js:property name="height" optional="true"><js:doc><![CDATA[Gets or sets the height of the view.]]></js:doc><js:type-annotation><js:number/></js:type-annotation></js:property><js:property name="maxWidth" optional="true"><js:doc><![CDATA[Gets or sets the maximum width the view may grow to.]]></js:doc><js:type-annotation><js:number/></js:type-annotation></js:property><js:property name="maxHeight" optional="true"><js:doc><![CDATA[Gets or sets the maximum height the view may grow to.]]></js:doc><js:type-annotation><js:number/></js:type-annotation></js:property><js:property name="minWidth" optional="true"><js:doc><![CDATA[Gets or sets the minimum width the view may grow to.]]></js:doc><js:type-annotation><js:number/></js:type-annotation></js:property><js:property name="minHeight" optional="true"><js:doc><![CDATA[Gets or sets the minimum height the view may grow to.]]></js:doc><js:type-annotation><js:number/></js:type-annotation></js:property><js:property name="horizontalAlignment" optional="true"><js:doc><![CDATA[Gets or sets the alignment of this view within its parent along the Horizontal axis.]]></js:doc><js:type-annotation><js:string/></js:type-annotation></js:property><js:property name="verticalAlignment" optional="true"><js:doc><![CDATA[Gets or sets the alignment of this view within its parent along the Vertical axis.]]></js:doc><js:type-annotation><js:string/></js:type-annotation></js:property><js:property name="margin" optional="true"><js:doc><![CDATA[Gets or sets the margin of this view within its parent.]]></js:doc><js:type-annotation><js:object/></js:type-annotation></js:property><js:property name="isVisible" optional="true"><js:type-annotation><js:boolean/></js:type-annotation></js:property><js:property name="cssClass" optional="true"><js:type-annotation><js:string/></js:type-annotation></js:property><js:property name="id" optional="true"><js:type-annotation><js:string/></js:type-annotation></js:property></js:interface><js:var name="isVisibleProperty"><js:type-annotation><js:type name="&quot;ui/core/dependency-observable&quot;:Property"/></js:type-annotation></js:var><js:var name="idProperty"><js:type-annotation><js:type name="&quot;ui/core/dependency-observable&quot;:Property"/></js:type-annotation></js:var><js:var name="cssClassProperty"><js:type-annotation><js:type name="&quot;ui/core/dependency-observable&quot;:Property"/></js:type-annotation></js:var><js:class qname="&quot;ui/core/view&quot;:View"><js:doc><![CDATA[This class is the base class for all UI components. 
A View occupies a rectangular area on the screen and is responsible for drawing (measure and arrange) of all UI components within. ]]></js:doc><js:extends><js:object/></js:extends><js:field name="width"><js:doc><![CDATA[Gets or sets the width of the view.]]></js:doc><js:type-annotation><js:number/></js:type-annotation></js:field><js:field name="height"><js:doc><![CDATA[Gets or sets the height of the view.]]></js:doc><js:type-annotation><js:number/></js:type-annotation></js:field><js:field name="maxWidth"><js:doc><![CDATA[Gets or sets the maximum width the view may grow to.]]></js:doc><js:type-annotation><js:number/></js:type-annotation></js:field><js:field name="maxHeight"><js:doc><![CDATA[Gets or sets the maximum height the view may grow to.]]></js:doc><js:type-annotation><js:number/></js:type-annotation></js:field><js:field name="minWidth"><js:doc><![CDATA[Gets or sets the minimum width the view may grow to.]]></js:doc><js:type-annotation><js:number/></js:type-annotation></js:field><js:field name="minHeight"><js:doc><![CDATA[Gets or sets the minimum height the view may grow to.]]></js:doc><js:type-annotation><js:number/></js:type-annotation></js:field><js:field name="horizontalAlignment"><js:doc><![CDATA[Gets or sets the alignment of this view within its parent along the Horizontal axis.]]></js:doc><js:type-annotation><js:string/></js:type-annotation></js:field><js:field name="verticalAlignment"><js:doc><![CDATA[Gets or sets the alignment of this view within its parent along the Vertical axis.]]></js:doc><js:type-annotation><js:string/></js:type-annotation></js:field><js:field name="margin"><js:doc><![CDATA[Gets or sets the margin of this view within its parent.]]></js:doc><js:type-annotation><js:object/></js:type-annotation></js:field><js:method name="measure"><js:param name="availableSize"><js:type-annotation><js:object/></js:type-annotation></js:param><js:param name="options" optional="true"><js:type-annotation><js:object/></js:type-annotation></js:param><js:returns><js:object/></js:returns></js:method><js:method name="arrange"><js:param name="finalRect"><js:type-annotation><js:object/></js:type-annotation></js:param><js:param name="options" optional="true"><js:type-annotation><js:object/></js:type-annotation></js:param></js:method><js:method name="observe"><js:param name="type"><js:type-annotation><js:number/></js:type-annotation></js:param><js:param name="callback"><js:type-annotation><js:function><js:param name="args"><js:type-annotation><js:type name="&quot;ui/gestures&quot;:GestureEventData"/></js:type-annotation></js:param></js:function></js:type-annotation></js:param><js:returns><js:type name="&quot;ui/gestures&quot;:GesturesObserver"/></js:returns></js:method><js:field name="isVisible"><js:type-annotation><js:boolean/></js:type-annotation></js:field><js:field name="style"><js:type-annotation><js:object/></js:type-annotation></js:field><js:field name="cssClass"><js:type-annotation><js:string/></js:type-annotation></js:field><js:field name="cssType"><js:type-annotation><js:string/></js:type-annotation></js:field><js:field name="visualState"><js:type-annotation><js:string/></js:type-annotation></js:field><js:field name="id"><js:type-annotation><js:string/></js:type-annotation></js:field><js:field name="parent"><js:type-annotation><js:type name="&quot;ui/core/view&quot;:View"/></js:type-annotation></js:field><js:method name="onLoaded"/><js:method name="onUnloaded"/><js:field name="isLoaded"><js:type-annotation><js:boolean/></js:type-annotation></js:field><js:field name="_domId"><js:type-annotation><js:number/></js:type-annotation></js:field><js:field name="_isAddedToNativeVisualTree"><js:type-annotation><js:boolean/></js:type-annotation></js:field><js:method name="_addView"><js:param name="view"><js:type-annotation><js:type name="&quot;ui/core/view&quot;:View"/></js:type-annotation></js:param></js:method><js:method name="_removeView"><js:param name="view"><js:type-annotation><js:type name="&quot;ui/core/view&quot;:View"/></js:type-annotation></js:param></js:method><js:method name="_addViewToNativeVisualTree"><js:doc><![CDATA[Performs the core logic of adding a child view to the native visual tree. Returns true if the view's native representation has been successfully added, false otherwise.]]></js:doc><js:param name="view"><js:type-annotation><js:type name="&quot;ui/core/view&quot;:View"/></js:type-annotation></js:param><js:returns><js:boolean/></js:returns></js:method><js:method name="_removeViewFromNativeVisualTree"><js:param name="view"><js:type-annotation><js:type name="&quot;ui/core/view&quot;:View"/></js:type-annotation></js:param></js:method><js:method name="_eachChildView"><js:param name="callback"><js:type-annotation><js:function><js:param name="child"><js:type-annotation><js:type name="&quot;ui/core/view&quot;:View"/></js:type-annotation></js:param><js:returns><js:boolean/></js:returns></js:function></js:type-annotation></js:param></js:method><js:field name="_childrenCount"><js:type-annotation><js:number/></js:type-annotation></js:field><js:field name="_context"><js:type-annotation><js:type name="android.content:Context"/></js:type-annotation></js:field><js:method name="_onAttached"><js:param name="context"><js:type-annotation><js:type name="android.content:Context"/></js:type-annotation></js:param></js:method><js:method name="_onContextChanged"/><js:method name="_onDetached"><js:param name="force" optional="true"><js:type-annotation><js:boolean/></js:type-annotation></js:param></js:method><js:method name="_createUI"/><js:method name="_getMeasureSpec"><js:param name="length"><js:type-annotation><js:number/></js:type-annotation></js:param><js:param name="spec" optional="true"><js:type-annotation><js:object/></js:type-annotation></js:param><js:returns><js:number/></js:returns></js:method><js:method name="_measureOverride"><js:param name="availableSize"><js:type-annotation><js:object/></js:type-annotation></js:param><js:param name="options" optional="true"><js:type-annotation><js:object/></js:type-annotation></js:param><js:returns><js:object/></js:returns></js:method><js:method name="_arrangeOverride"><js:param name="finalSize"><js:type-annotation><js:object/></js:type-annotation></js:param><js:param name="options" optional="true"><js:type-annotation><js:object/></js:type-annotation></js:param></js:method><js:method name="_measureNativeView"><js:param name="availableSize"><js:type-annotation><js:object/></js:type-annotation></js:param><js:param name="options" optional="true"><js:type-annotation><js:object/></js:type-annotation></js:param><js:returns><js:object/></js:returns></js:method><js:method name="_invalidateMeasure"/><js:method name="_invalidateArrange"/><js:method name="_updateLayout"/><js:method name="_goToVisualState"><js:param name="state"><js:type-annotation><js:string/></js:type-annotation></js:param></js:method><js:method name="_setBounds"><js:param name="rect"><js:type-annotation><js:object/></js:type-annotation></js:param></js:method><js:method name="_getBounds"><js:returns><js:object/></js:returns></js:method><js:field name="_nativeView"><js:type-annotation><js:object/></js:type-annotation></js:field></js:class><js:interface qname="&quot;ui/core/view&quot;:AddArrayFromBuilder"><js:method name="_addArrayFromBuilder"><js:param name="name"><js:type-annotation><js:string/></js:type-annotation></js:param><js:param name="value"><js:type-annotation><js:type name="Array"><js:object/></js:type></js:type-annotation></js:param></js:method></js:interface><js:interface qname="&quot;ui/core/view&quot;:AddChildFromBuilder"><js:method name="_addChildFromBuilder"><js:param name="name"><js:type-annotation><js:string/></js:type-annotation></js:param><js:param name="value"><js:type-annotation><js:object/></js:type-annotation></js:param></js:method></js:interface></js:module><js:module qname="&quot;ui/frame&quot;"><js:class qname="&quot;ui/frame&quot;:Frame"><js:doc><![CDATA[Represents the logical View unit that is responsible for navigation withing an application.
Typically an application will have a Frame object at a root level.
Nested frames are supported, enabling hierarchical navigation scenarios.]]></js:doc><js:extends><js:type name="&quot;ui/core/view&quot;:View"/></js:extends><js:method name="goBack"><js:doc><![CDATA[Navigates to the previous entry (if any) in the back stack.]]></js:doc></js:method><js:method name="canGoBack"><js:doc><![CDATA[Checks whether the goBack operation is available.]]></js:doc><js:returns><js:boolean/></js:returns></js:method><js:method name="navigate"><js:doc><![CDATA[Navigates to a Page instance as described by the module name. 
This method will require the module and will check for a Page property in the exports of the module.]]></js:doc><js:param name="pageModuleName"><js:doc><![CDATA[The name of the module to require.]]></js:doc><js:type-annotation><js:string/></js:type-annotation></js:param></js:method><js:method name="navigate"><js:doc><![CDATA[Navigates to the specified Page instance.]]></js:doc><js:param name="page"><js:doc><![CDATA[The Page to navigate to.]]></js:doc><js:type-annotation><js:type name="&quot;ui/page&quot;:Page"/></js:type-annotation></js:param></js:method><js:method name="navigate"><js:doc><![CDATA[Creates a new Page instance using the provided callback and navigates to that Page.]]></js:doc><js:param name="create"><js:doc><![CDATA[The function to be used to create the new Page instance.]]></js:doc><js:type-annotation><js:function><js:returns><js:type name="&quot;ui/page&quot;:Page"/></js:returns></js:function></js:type-annotation></js:param></js:method><js:method name="navigate"><js:doc><![CDATA[Navigates to a Page resolved by the provided NavigationEntry object.
Since there are several ways to specify a Page instance through an entry, there is a resolution priority:
    1. entry.page
    2. entry.moduleName
    3. entry.create()]]></js:doc><js:param name="entry"><js:doc><![CDATA[The NavigationEntry instance.]]></js:doc><js:type-annotation><js:type name="&quot;ui/frame&quot;:NavigationEntry"/></js:type-annotation></js:param></js:method><js:field name="backStack"><js:doc><![CDATA[Gets the back stack of this instance.]]></js:doc><js:type-annotation><js:type name="Array"><js:type name="&quot;ui/frame&quot;:NavigationEntry"/></js:type></js:type-annotation></js:field><js:field name="currentPage"><js:doc><![CDATA[Gets the Page instance the Frame is currently navigated to.]]></js:doc><js:type-annotation><js:type name="&quot;ui/page&quot;:Page"/></js:type-annotation></js:field><js:field name="currentEntry"><js:doc><![CDATA[Gets the NavigationEntry instance the Frame is currently navigated to.]]></js:doc><js:type-annotation><js:type name="&quot;ui/frame&quot;:NavigationEntry"/></js:type-annotation></js:field><js:field name="animated"><js:doc><![CDATA[Gets or sets if navigation transitions should be animated.]]></js:doc><js:type-annotation><js:boolean/></js:type-annotation></js:field><js:field name="defaultAnimatedNavigation" modifier="static"><js:doc><![CDATA[Gets or sets if navigation transitions should be animated globally.]]></js:doc><js:type-annotation><js:boolean/></js:type-annotation></js:field><js:field name="android"><js:doc><![CDATA[Gets the AndroidFrame object that represents the Android-specific APIs for this Frame. Valid when running on Android OS.]]></js:doc><js:type-annotation><js:type name="&quot;ui/frame&quot;:AndroidFrame"/></js:type-annotation></js:field><js:field name="ios"><js:doc><![CDATA[Gets the iOSFrame object that represents the iOS-specific APIs for this Frame. Valid when running on iOS.]]></js:doc><js:type-annotation><js:type name="&quot;ui/frame&quot;:iOSFrame"/></js:type-annotation></js:field><js:method name="_processNavigationStack"><js:param name="page"><js:type-annotation><js:type name="&quot;ui/page&quot;:Page"/></js:type-annotation></js:param></js:method></js:class><js:function name="topmost"><js:doc><![CDATA[Gets the topmost frame in the frames stack. An application will typically has one frame instance. Multiple frames handle nested (hierarchical) navigation scenarios.]]></js:doc><js:returns><js:type name="&quot;ui/frame&quot;:Frame"/></js:returns></js:function><js:function name="goBack"><js:doc><![CDATA[Navigates back using the navigation hierarchy (if any). Updates the Frame stack as needed.
This method will start from the topmost Frame and will recursively search for an instance that has the canGoBack operation available.]]></js:doc></js:function><js:function name="stack"><js:doc><![CDATA[Gets the frames stack.]]></js:doc><js:returns><js:type name="Array"><js:type name="&quot;ui/frame&quot;:Frame"/></js:type></js:returns></js:function><js:interface qname="&quot;ui/frame&quot;:NavigationEntry"><js:doc><![CDATA[Represents an entry in the back stack of a Frame object.]]></js:doc><js:property name="moduleName" optional="true"><js:doc><![CDATA[The name of the module containing the Page instance to load. Optional.]]></js:doc><js:type-annotation><js:string/></js:type-annotation></js:property><js:property name="page" optional="true"><js:doc><![CDATA[The Page instance to load. Optional.]]></js:doc><js:type-annotation><js:type name="&quot;ui/page&quot;:Page"/></js:type-annotation></js:property><js:property name="create" optional="true"><js:doc><![CDATA[A function used to create the Page instance. Optional.]]></js:doc><js:type-annotation><js:function><js:returns><js:type name="&quot;ui/page&quot;:Page"/></js:returns></js:function></js:type-annotation></js:property><js:property name="context" optional="true"><js:doc><![CDATA[An object passed to the onNavigatedTo callback of the Page. Typically this is used to pass some data among pages. Optional.]]></js:doc><js:type-annotation><js:object/></js:type-annotation></js:property><js:property name="tag" optional="true"><js:doc><![CDATA[Tag associated with the entry.]]></js:doc><js:type-annotation><js:string/></js:type-annotation></js:property><js:property name="resolvedPage" optional="true"><js:doc><![CDATA[Stores the resolved page instance.]]></js:doc><js:type-annotation><js:type name="&quot;ui/page&quot;:Page"/></js:type-annotation></js:property><js:property name="animated" optional="true"><js:doc><![CDATA[True to navigate to the new Page using animated transitions, false otherwise.]]></js:doc><js:type-annotation><js:boolean/></js:type-annotation></js:property></js:interface><js:interface qname="&quot;ui/frame&quot;:AndroidOptionEventData"><js:doc><![CDATA[Represents the data passed to the knownEvents.android.optionSelected event. 
This event is raised by the Android OS when an option in the Activity's action bar has been selected.]]></js:doc><js:extends><js:type name="&quot;data/observable&quot;:EventData"/></js:extends><js:property name="item"><js:doc><![CDATA[Gets the Android-specific menu item that has been selected.]]></js:doc><js:type-annotation><js:type name="android.view:MenuItem"/></js:type-annotation></js:property><js:property name="handled"><js:doc><![CDATA[True to mark the event as handled (that is to prevent the default processing).]]></js:doc><js:type-annotation><js:boolean/></js:type-annotation></js:property></js:interface><js:interface qname="&quot;ui/frame&quot;:AndroidFrame"><js:doc><![CDATA[Represents the Android-specific Frame object, aggregated within the common Frame one.
In Android there are two types of navigation - using new Activity instances or using Fragments within the main Activity.
To start a new Activity, a new Frame instance should be created and navigated to the desired Page.]]></js:doc><js:extends><js:type name="&quot;data/observable&quot;:Observable"/></js:extends><js:property name="rootViewGroup"><js:doc><![CDATA[Gets the native android.view.ViewGroup instance that represents the root layout part of the Frame.]]></js:doc><js:type-annotation><js:type name="android.view:ViewGroup"/></js:type-annotation></js:property><js:property name="activity"><js:doc><![CDATA[Gets the native android.app.Activity instance associated with this Frame. In case of nested Frame objects, this property points to the activity of the root Frame.]]></js:doc><js:type-annotation><js:type name="android.app:Activity"/></js:type-annotation></js:property><js:property name="currentActivity"><js:doc><![CDATA[Gets the current (foreground) activity for the application. This property will recursively traverse all existing Frame objects and check for own Activity property.]]></js:doc><js:type-annotation><js:type name="android.app:Activity"/></js:type-annotation></js:property><js:property name="actionBar"><js:doc><![CDATA[Gets the actionBar property of the currentActivity.]]></js:doc><js:type-annotation><js:type name="android.app:ActionBar"/></js:type-annotation></js:property><js:method name="onActivityRequested"><js:doc><![CDATA[A function called by the Runtime whenever a new Activity is about to be opened.]]></js:doc><js:param name="intent"><js:doc><![CDATA[The native android.content.Intent object passed to the Activity's onCreate method.]]></js:doc><js:type-annotation><js:type name="android.content:Intent"/></js:type-annotation></js:param><js:returns><js:type name="Object"/></js:returns></js:method><js:property name="showActionBar"><js:doc><![CDATA[Determines whether the Activity associated with this Frame will display an action bar or not.]]></js:doc><js:type-annotation><js:boolean/></js:type-annotation></js:property><js:property name="cachePagesOnNavigate"><js:doc><![CDATA[Gets or sets whether the page UI will be cached when navigating away from the page.]]></js:doc><js:type-annotation><js:boolean/></js:type-annotation></js:property></js:interface><js:interface qname="&quot;ui/frame&quot;:iOSFrame"><js:doc><![CDATA[Represents the iOS-specific Frame object, aggregated within the common Frame one.
In iOS the native controller, associated with a Frame object is UINavigationController.
The navigation controller will automatically hide/show its navigation bar depending on the back stack of the Frame.]]></js:doc><js:property name="controller"><js:doc><![CDATA[Gets the native UINavigationController instance associated with this Frame.]]></js:doc><js:type-annotation><js:type name="UINavigationController"/></js:type-annotation></js:property></js:interface><js:module qname="&quot;ui/frame&quot;:knownEvents"><js:doc><![CDATA[Encapsulates the events raised by the Frame object.]]></js:doc><js:module qname="&quot;ui/frame&quot;.knownEvents:android"><js:doc><![CDATA[Encapsulates the events raised by the android part of the Frame.]]></js:doc><js:var name="optionSelected"><js:type-annotation><js:string/></js:type-annotation></js:var></js:module></js:module></js:module><js:module qname="&quot;ui/image&quot;"><js:class qname="&quot;ui/image&quot;:Image"><js:doc><![CDATA[Represents a class that provides functionality for loading and streching image(s).]]></js:doc><js:extends><js:type name="&quot;ui/core/view&quot;:View"/></js:extends><js:field name="android"><js:doc><![CDATA[Gets the native android widget (android.widget.ImageView) that represents the user interface for this component. Valid only when running on Android OS.]]></js:doc><js:type-annotation><js:type name="android.widget:ImageView"/></js:type-annotation></js:field><js:field name="ios"><js:doc><![CDATA[Gets the native iOS UIImageView that represents the user interface for this component. Valid only when running on iOS.]]></js:doc><js:type-annotation><js:type name="UIImageView"/></js:type-annotation></js:field><js:field name="source"><js:doc><![CDATA[Gets or sets the image source of the image.]]></js:doc><js:type-annotation><js:type name="&quot;image-source&quot;:ImageSource"/></js:type-annotation></js:field><js:field name="url"><js:doc><![CDATA[Gets or sets the URL of the image.]]></js:doc><js:type-annotation><js:string/></js:type-annotation></js:field><js:field name="isLoading"><js:doc><![CDATA[Gets a value indicating if the image is currently loading]]></js:doc><js:type-annotation><js:boolean/></js:type-annotation></js:field><js:field name="stretch"><js:doc><![CDATA[Gets or sets the image stretch mode.]]></js:doc><js:type-annotation><js:string/></js:type-annotation></js:field></js:class><js:module qname="&quot;ui/image&quot;:stretch"><js:var name="none"><js:type-annotation><js:string/></js:type-annotation></js:var><js:var name="aspectFill"><js:type-annotation><js:string/></js:type-annotation></js:var><js:var name="aspectFit"><js:type-annotation><js:string/></js:type-annotation></js:var><js:var name="fill"><js:type-annotation><js:string/></js:type-annotation></js:var></js:module><js:interface qname="&quot;ui/image&quot;:Options"><js:extends><js:type name="&quot;ui/core/view&quot;:Options"/></js:extends><js:property name="source"><js:doc><![CDATA[Gets or sets the image source of the image.]]></js:doc><js:type-annotation><js:type name="&quot;image-source&quot;:ImageSource"/></js:type-annotation></js:property><js:property name="url"><js:doc><![CDATA[Gets or sets the URL of the image.]]></js:doc><js:type-annotation><js:string/></js:type-annotation></js:property><js:property name="stretch"><js:doc><![CDATA[Gets or sets the image stretch mode.]]></js:doc><js:type-annotation><js:string/></js:type-annotation></js:property></js:interface></js:module><js:module qname="&quot;ui/label&quot;"><js:var name="textProperty"><js:type-annotation><js:type name="&quot;ui/core/dependency-observable&quot;:Property"/></js:type-annotation></js:var><js:var name="textWrapProperty"><js:type-annotation><js:type name="&quot;ui/core/dependency-observable&quot;:Property"/></js:type-annotation></js:var><js:class qname="&quot;ui/label&quot;:Label"><js:doc><![CDATA[Represents a text label.]]></js:doc><js:extends><js:type name="&quot;ui/core/view&quot;:View"/></js:extends><js:field name="android"><js:doc><![CDATA[Gets the native android widget (android.widget.TextView) that represents the user interface for this component. Valid only when running on Android OS.]]></js:doc><js:type-annotation><js:type name="android.widget:TextView"/></js:type-annotation></js:field><js:field name="ios"><js:doc><![CDATA[Gets the native UILabel that represents the user interface for this component. Valid only when running on iOS.]]></js:doc><js:type-annotation><js:type name="UILabel"/></js:type-annotation></js:field><js:field name="text"><js:doc><![CDATA[Gets or sets the text content of a Label.]]></js:doc><js:type-annotation><js:string/></js:type-annotation></js:field><js:field name="textWrap"><js:doc><![CDATA[Gets or sets whether the Label wraps text or not.]]></js:doc><js:type-annotation><js:boolean/></js:type-annotation></js:field></js:class><js:interface qname="&quot;ui/label&quot;:Options"><js:extends><js:type name="&quot;ui/core/view&quot;:Options"/></js:extends><js:property name="text" optional="true"><js:doc><![CDATA[Gets or sets the text content of a Label.]]></js:doc><js:type-annotation><js:string/></js:type-annotation></js:property><js:property name="textWrap" optional="true"><js:doc><![CDATA[Gets or sets whether the Label wraps text or not.]]></js:doc><js:type-annotation><js:boolean/></js:type-annotation></js:property></js:interface></js:module><js:module qname="&quot;ui/pagesNew&quot;"><js:interface qname="&quot;ui/pagesNew&quot;:TabEntry"><js:property name="pageModuleName"><js:type-annotation><js:string/></js:type-annotation></js:property><js:property name="pageTitle"><js:type-annotation><js:string/></js:type-annotation></js:property></js:interface><js:interface qname="&quot;ui/pagesNew&quot;:NavigationEntry"><js:property name="pageModuleName"><js:type-annotation><js:string/></js:type-annotation></js:property><js:property name="context" optional="true"><js:type-annotation><js:object/></js:type-annotation></js:property></js:interface><js:class qname="&quot;ui/pagesNew&quot;:Visual"><js:extends><js:type name="&quot;ui/core/view&quot;:View"/></js:extends></js:class><js:class qname="&quot;ui/pagesNew&quot;:Page"><js:extends><js:type name="&quot;ui/pagesNew&quot;:Visual"/></js:extends></js:class><js:class qname="&quot;ui/pagesNew&quot;:ContentPage"><js:extends><js:type name="&quot;ui/pagesNew&quot;:Page"/></js:extends><js:field name="contentView"><js:type-annotation><js:type name="&quot;ui/core/view&quot;:View"/></js:type-annotation></js:field></js:class><js:class qname="&quot;ui/pagesNew&quot;:TabbedPage"><js:extends><js:type name="&quot;ui/pagesNew&quot;:Page"/></js:extends><js:field name="itemsSource"><js:type-annotation><js:type name="Array"><js:type name="&quot;ui/pagesNew&quot;:TabEntry"/></js:type></js:type-annotation></js:field><js:field name="currentPageModule"><js:type-annotation><js:string/></js:type-annotation></js:field><js:field name="currentPage"><js:type-annotation><js:type name="&quot;ui/pagesNew&quot;:Page"/></js:type-annotation></js:field></js:class><js:class qname="&quot;ui/pagesNew&quot;:NavigationPage"><js:extends><js:type name="&quot;ui/pagesNew&quot;:Page"/></js:extends><js:method name="goBack"/><js:method name="canGoBack"><js:returns><js:boolean/></js:returns></js:method><js:method name="navigateTo"><js:param name="moudleName"><js:type-annotation><js:string/></js:type-annotation></js:param></js:method><js:method name="navigate"><js:param name="entry"><js:type-annotation><js:type name="&quot;ui/pagesNew&quot;:NavigationEntry"/></js:type-annotation></js:param></js:method><js:field name="currentPage"><js:type-annotation><js:type name="&quot;ui/pagesNew&quot;:Page"/></js:type-annotation></js:field><js:field name="showActionBar"><js:type-annotation><js:boolean/></js:type-annotation></js:field></js:class></js:module><js:module qname="&quot;ui/page&quot;"><js:interface qname="&quot;ui/page&quot;:NavigatedData"><js:extends><js:type name="&quot;data/observable&quot;:EventData"/></js:extends><js:property name="context"><js:type-annotation><js:object/></js:type-annotation></js:property></js:interface><js:module qname="&quot;ui/page&quot;:knownEvents"><js:var name="navigatedTo"><js:type-annotation><js:string/></js:type-annotation></js:var></js:module><js:class qname="&quot;ui/page&quot;:Page"><js:extends><js:type name="&quot;ui/content-view&quot;:ContentView"/></js:extends><js:field name="css"><js:type-annotation><js:string/></js:type-annotation></js:field><js:field name="navigationContext"><js:type-annotation><js:object/></js:type-annotation></js:field><js:field name="frame"><js:doc><![CDATA[Gets the Frame object controlling this instance.]]></js:doc><js:type-annotation><js:type name="&quot;ui/frame&quot;:Frame"/></js:type-annotation></js:field><js:method name="onNavigatingTo"><js:doc><![CDATA[A method called before navigating to the page.]]></js:doc><js:param name="context"><js:doc><![CDATA[- The data passed to the page through the NavigationEntry.context property.]]></js:doc><js:type-annotation><js:object/></js:type-annotation></js:param></js:method><js:method name="onNavigatedTo"><js:doc><![CDATA[A method called after navigated to the page.]]></js:doc><js:param name="context"><js:doc><![CDATA[- The data passed to the page through the NavigationEntry.context property.]]></js:doc><js:type-annotation><js:object/></js:type-annotation></js:param></js:method><js:method name="onNavigatingFrom"><js:doc><![CDATA[A method called before navigating from the page.]]></js:doc></js:method><js:method name="onNavigatedFrom"><js:doc><![CDATA[A method called after navigated from the page.]]></js:doc></js:method><js:method name="_getStyleScope"><js:returns><js:object/></js:returns></js:method><js:method name="on"><js:param name="event"><js:type-annotation><js:string/></js:type-annotation></js:param><js:param name="callback"><js:type-annotation><js:function><js:param name="data"><js:type-annotation><js:type name="&quot;data/observable&quot;:EventData"/></js:type-annotation></js:param></js:function></js:type-annotation></js:param></js:method><js:method name="on"><js:doc><![CDATA[Raised when navigation to the page is finished.]]></js:doc><js:param name="event"><js:type-annotation/></js:param><js:param name="callback"><js:type-annotation><js:function><js:param name="args"><js:type-annotation><js:type name="&quot;ui/page&quot;:NavigatedData"/></js:type-annotation></js:param></js:function></js:type-annotation></js:param></js:method></js:class><js:interface qname="&quot;ui/page&quot;:Options"><js:extends><js:type name="&quot;ui/core/view&quot;:Options"/></js:extends><js:property name="module" optional="true"><js:doc><![CDATA[Gets or sets the page module.]]></js:doc><js:type-annotation><js:object/></js:type-annotation></js:property><js:property name="filename" optional="true"><js:doc><![CDATA[Gets or sets the page module file name.]]></js:doc><js:type-annotation><js:string/></js:type-annotation></js:property><js:property name="exports" optional="true"><js:doc><![CDATA[Gets or sets the page module exports.]]></js:doc><js:type-annotation><js:object/></js:type-annotation></js:property></js:interface></js:module><js:module qname="&quot;ui/panels/grid-panel&quot;"><js:class qname="&quot;ui/panels/grid-panel&quot;:GridUnitType"><js:doc><![CDATA[GridUnitType enum is used to indicate what kind of value the GridLength is holding.]]></js:doc><js:field name="auto" modifier="static"><js:doc><![CDATA[The value indicates that content should be calculated without constraints.]]></js:doc><js:type-annotation><js:number/></js:type-annotation></js:field><js:field name="pixel" modifier="static"><js:doc><![CDATA[The value is expressed as a pixel.]]></js:doc><js:type-annotation><js:number/></js:type-annotation></js:field><js:field name="star" modifier="static"><js:doc><![CDATA[The value is expressed as a weighted proportion of available space.]]></js:doc><js:type-annotation><js:number/></js:type-annotation></js:field></js:class><js:class qname="&quot;ui/panels/grid-panel&quot;:GridLength"><js:doc><![CDATA[GridLength is the type used for various length-like properties in the system, 
that explicitely support Star unit type. For example, "Width", "Height" 
properties of ColumnDefinition and RowDefinition used by GridPanel]]></js:doc><js:field name="auto" modifier="static"><js:doc><![CDATA[Returns initialized auto GridLength value.]]></js:doc><js:type-annotation><js:type name="&quot;ui/panels/grid-panel&quot;:GridLength"/></js:type-annotation></js:field><js:field name="gridUnitType"><js:doc><![CDATA[Returns unit type of this GridLength instance.]]></js:doc><js:type-annotation><js:type name="&quot;ui/panels/grid-panel&quot;:GridUnitType"/></js:type-annotation></js:field><js:field name="isAbsolute"><js:doc><![CDATA[Returns true if this GridLength instance holds 
an absolute (pixel) value.]]></js:doc><js:type-annotation><js:boolean/></js:type-annotation></js:field><js:field name="isAuto"><js:doc><![CDATA[Returns true if this GridLength instance is 
automatic (not specified).]]></js:doc><js:type-annotation><js:boolean/></js:type-annotation></js:field><js:field name="isStar"><js:doc><![CDATA[Returns true if this GridLength instance holds weighted propertion 
of available space.]]></js:doc><js:type-annotation><js:boolean/></js:type-annotation></js:field><js:field name="value"><js:doc><![CDATA[Returns value part of this GridLength instance.]]></js:doc><js:type-annotation><js:number/></js:type-annotation></js:field></js:class><js:class qname="&quot;ui/panels/grid-panel&quot;:ColumnDefinition"><js:doc><![CDATA[Defines column-specific properties that apply to GridPanel elements. ]]></js:doc><js:field name="actualWidth"><js:doc><![CDATA[Gets a value that represents the actual calculated width of a ColumnDefinition.
This is a read-only property.]]></js:doc><js:type-annotation><js:number/></js:type-annotation></js:field><js:field name="maxWidth"><js:doc><![CDATA[Gets or sets a value that represents the maximum width of a ColumnDefinition.]]></js:doc><js:type-annotation><js:number/></js:type-annotation></js:field><js:field name="minWidth"><js:doc><![CDATA[Gets or sets a value that represents the minimum width of a ColumnDefinition.]]></js:doc><js:type-annotation><js:number/></js:type-annotation></js:field><js:field name="width"><js:doc><![CDATA[Gets or sets the width of a ColumnDefinition. ]]></js:doc><js:type-annotation><js:type name="&quot;ui/panels/grid-panel&quot;:GridLength"/></js:type-annotation></js:field><js:field name="offset"><js:doc><![CDATA[Gets a value that represents the offset value of this ColumnDefinition.
This is a read-only property.]]></js:doc><js:type-annotation><js:number/></js:type-annotation></js:field></js:class><js:class qname="&quot;ui/panels/grid-panel&quot;:RowDefinition"><js:doc><![CDATA[Defines row-specific properties that apply to GridPanel elements.]]></js:doc><js:field name="actualHeight"><js:doc><![CDATA[Gets a value that represents the calculated height of the RowDefinition.
This is a read-only property.]]></js:doc><js:type-annotation><js:number/></js:type-annotation></js:field><js:field name="maxHeight"><js:doc><![CDATA[Gets or sets a value that represents the maximum height of a RowDefinition. ]]></js:doc><js:type-annotation><js:number/></js:type-annotation></js:field><js:field name="minHeight"><js:doc><![CDATA[Gets or sets a value that represents the minimum height of a RowDefinition. ]]></js:doc><js:type-annotation><js:number/></js:type-annotation></js:field><js:field name="height"><js:doc><![CDATA[Gets or sets the height of a RowDefinition.]]></js:doc><js:type-annotation><js:type name="&quot;ui/panels/grid-panel&quot;:GridLength"/></js:type-annotation></js:field><js:field name="offset"><js:doc><![CDATA[Gets a value that represents the offset value of this RowDefinition.
This is a read-only property.]]></js:doc><js:type-annotation><js:number/></js:type-annotation></js:field></js:class><js:class qname="&quot;ui/panels/grid-panel&quot;:GridPanel"><js:doc><![CDATA[Defines a flexible grid area that consists of columns and rows.]]></js:doc><js:extends><js:type name="&quot;ui/panels/panel&quot;:Panel"/></js:extends><js:method name="getColumn" modifier="static"><js:doc><![CDATA[Gets the value of the Column attached property from a given View.]]></js:doc><js:param name="view"><js:type-annotation><js:type name="&quot;ui/core/view&quot;:View"/></js:type-annotation></js:param><js:returns><js:number/></js:returns></js:method><js:method name="setColumn" modifier="static"><js:doc><![CDATA[Sets the value of the Column attached property to a given View. ]]></js:doc><js:param name="view"><js:type-annotation><js:type name="&quot;ui/core/view&quot;:View"/></js:type-annotation></js:param><js:param name="value"><js:type-annotation><js:number/></js:type-annotation></js:param></js:method><js:method name="getColumnSpan" modifier="static"><js:doc><![CDATA[Gets the value of the ColumnSpan attached property from a given View.]]></js:doc><js:param name="view"><js:type-annotation><js:type name="&quot;ui/core/view&quot;:View"/></js:type-annotation></js:param><js:returns><js:number/></js:returns></js:method><js:method name="setColumnSpan" modifier="static"><js:doc><![CDATA[Sets the value of the ColumnSpan attached property to a given View. ]]></js:doc><js:param name="view"><js:type-annotation><js:type name="&quot;ui/core/view&quot;:View"/></js:type-annotation></js:param><js:param name="value"><js:type-annotation><js:number/></js:type-annotation></js:param></js:method><js:method name="getRow" modifier="static"><js:doc><![CDATA[Gets the value of the Row attached property from a given View.]]></js:doc><js:param name="view"><js:type-annotation><js:type name="&quot;ui/core/view&quot;:View"/></js:type-annotation></js:param><js:returns><js:number/></js:returns></js:method><js:method name="setRow" modifier="static"><js:doc><![CDATA[Sets the value of the Row attached property to a given View. ]]></js:doc><js:param name="view"><js:type-annotation><js:type name="&quot;ui/core/view&quot;:View"/></js:type-annotation></js:param><js:param name="value"><js:type-annotation><js:number/></js:type-annotation></js:param></js:method><js:method name="getRowSpan" modifier="static"><js:doc><![CDATA[Gets the value of the RowSpan attached property from a given View.]]></js:doc><js:param name="view"><js:type-annotation><js:type name="&quot;ui/core/view&quot;:View"/></js:type-annotation></js:param><js:returns><js:number/></js:returns></js:method><js:method name="setRowSpan" modifier="static"><js:doc><![CDATA[Sets the value of the RowSpan attached property to a given View. ]]></js:doc><js:param name="view"><js:type-annotation><js:type name="&quot;ui/core/view&quot;:View"/></js:type-annotation></js:param><js:param name="value"><js:type-annotation><js:number/></js:type-annotation></js:param></js:method><js:method name="addColumnDefinition"><js:doc><![CDATA[Adds a ColumnDefinition element to a GridPanel.]]></js:doc><js:param name="definition"><js:type-annotation><js:type name="&quot;ui/panels/grid-panel&quot;:ColumnDefinition"/></js:type-annotation></js:param></js:method><js:method name="addRowDefinition"><js:doc><![CDATA[Adds a RowDefinition element to a GridPanel.]]></js:doc><js:param name="definition"><js:type-annotation><js:type name="&quot;ui/panels/grid-panel&quot;:RowDefinition"/></js:type-annotation></js:param></js:method><js:method name="removeColumnDefinition"><js:doc><![CDATA[Removes a ColumnDefinition element from a GridPanel.]]></js:doc><js:param name="definition"><js:type-annotation><js:type name="&quot;ui/panels/grid-panel&quot;:ColumnDefinition"/></js:type-annotation></js:param><js:returns><js:boolean/></js:returns></js:method><js:method name="removeRowDefinition"><js:doc><![CDATA[Removes a RowDefinition element from a GridPanel.]]></js:doc><js:param name="definition"><js:type-annotation><js:type name="&quot;ui/panels/grid-panel&quot;:RowDefinition"/></js:type-annotation></js:param><js:returns><js:boolean/></js:returns></js:method><js:method name="getColumnDefinitions"><js:doc><![CDATA[Gets array of ColumnDefinitions defined on this instance of GridPanel. ]]></js:doc><js:returns><js:type name="Array"><js:type name="&quot;ui/panels/grid-panel&quot;:ColumnDefinition"/></js:type></js:returns></js:method><js:method name="getRowDefinitions"><js:doc><![CDATA[Gets array of RowDefinitions defined on this instance of GridPanel.]]></js:doc><js:returns><js:type name="Array"><js:type name="&quot;ui/panels/grid-panel&quot;:RowDefinition"/></js:type></js:returns></js:method></js:class><js:interface qname="&quot;ui/panels/grid-panel&quot;:Options"><js:property name="rows" optional="true"><js:type-annotation><js:type name="Array"><js:type name="&quot;ui/panels/grid-panel&quot;:IRowDefinition"/></js:type></js:type-annotation></js:property><js:property name="columns" optional="true"><js:type-annotation><js:type name="Array"><js:type name="&quot;ui/panels/grid-panel&quot;:IColumnDefinition"/></js:type></js:type-annotation></js:property></js:interface><js:interface qname="&quot;ui/panels/grid-panel&quot;:IRowDefinition"><js:property name="maxHeight" optional="true"><js:type-annotation><js:number/></js:type-annotation></js:property><js:property name="minHeight" optional="true"><js:type-annotation><js:number/></js:type-annotation></js:property><js:property name="height" optional="true"><js:type-annotation><js:type name="&quot;ui/panels/grid-panel&quot;:GridLength"/></js:type-annotation></js:property></js:interface><js:interface qname="&quot;ui/panels/grid-panel&quot;:IColumnDefinition"><js:property name="maxWidth" optional="true"><js:type-annotation><js:number/></js:type-annotation></js:property><js:property name="minWidth" optional="true"><js:type-annotation><js:number/></js:type-annotation></js:property><js:property name="width" optional="true"><js:type-annotation><js:type name="&quot;ui/panels/grid-panel&quot;:GridLength"/></js:type-annotation></js:property></js:interface></js:module><js:module qname="&quot;ui/panels/stack-panel&quot;"><js:var name="orientationProperty"><js:type-annotation><js:type name="&quot;ui/core/dependency-observable&quot;:Property"/></js:type-annotation></js:var><js:class qname="&quot;ui/panels/stack-panel&quot;:StackPanel"><js:doc><![CDATA[StackPanel is used to arrange children into single line.]]></js:doc><js:extends><js:type name="&quot;ui/panels/panel&quot;:Panel"/></js:extends><js:field name="orientation"><js:doc><![CDATA[Specifies dimension of children stacking.]]></js:doc><js:type-annotation><js:string/></js:type-annotation></js:field></js:class><js:module qname="&quot;ui/panels/stack-panel&quot;:orientation"><js:doc><![CDATA[Orientation indicates a direction of a layout that can exist in a horizontal or vertical state.]]></js:doc><js:var name="horizontal"><js:type-annotation><js:string/></js:type-annotation></js:var><js:var name="vertical"><js:type-annotation><js:string/></js:type-annotation></js:var></js:module></js:module><js:module qname="&quot;ui/slide-out&quot;"><js:var name="slideContentWidthProperty"><js:type-annotation><js:type name="&quot;ui/core/dependency-observable&quot;:Property"/></js:type-annotation></js:var><js:var name="optionsProperty"><js:type-annotation><js:type name="&quot;ui/core/dependency-observable&quot;:Property"/></js:type-annotation></js:var><js:class qname="&quot;ui/slide-out&quot;:SlideOutControl"><js:extends><js:type name="&quot;ui/core/view&quot;:View"/></js:extends><js:field name="android"><js:type-annotation><js:type name="android.support.v4.widget:DrawerLayout"/></js:type-annotation></js:field><js:field name="ios"><js:type-annotation><js:type name="UIViewController"/></js:type-annotation></js:field><js:field name="slideContent"><js:type-annotation><js:type name="&quot;ui/core/view&quot;:View"/></js:type-annotation></js:field><js:field name="mainContent"><js:type-annotation><js:type name="&quot;ui/core/view&quot;:View"/></js:type-annotation></js:field><js:field name="slideContentWidth"><js:type-annotation><js:number/></js:type-annotation></js:field><js:field name="options"><js:type-annotation><js:type name="&quot;ui/slide-out&quot;:Options"/></js:type-annotation></js:field><js:method name="openSlideContent"/><js:method name="closeSlideContent"/><js:method name="_attachSlideContent"/><js:method name="_attachMainContent"/><js:method name="_detachSlideContent"/><js:method name="_detachMainContent"/></js:class><js:interface qname="&quot;ui/slide-out&quot;:Options"><js:property name="android"><js:type-annotation><js:type name="&quot;ui/slide-out&quot;:AndroidOptions"/></js:type-annotation></js:property></js:interface><js:interface qname="&quot;ui/slide-out&quot;:AndroidOptions"><js:property name="toggleImageResourceId"><js:type-annotation><js:number/></js:type-annotation></js:property><js:property name="openDescriptionResourceId"><js:type-annotation><js:number/></js:type-annotation></js:property><js:property name="closeDescriptionResourceId"><js:type-annotation><js:number/></js:type-annotation></js:property></js:interface></js:module><js:module qname="&quot;ui/tab-view&quot;"><js:interface qname="&quot;ui/tab-view&quot;:TabEntry"><js:doc><![CDATA[Represents a tab view entry.]]></js:doc><js:property name="title"><js:doc><![CDATA[Gets or sets the title of the TabEntry.]]></js:doc><js:type-annotation><js:string/></js:type-annotation></js:property><js:property name="view"><js:doc><![CDATA[Gets or sets the view of the TabEntry.]]></js:doc><js:type-annotation><js:type name="&quot;ui/core/view&quot;:View"/></js:type-annotation></js:property></js:interface><js:class qname="&quot;ui/tab-view&quot;:TabView"><js:doc><![CDATA[Represents a tab view.]]></js:doc><js:extends><js:type name="&quot;ui/core/view&quot;:View"/></js:extends><js:field name="items"><js:doc><![CDATA[Gets or sets the items of the TabView.]]></js:doc><js:type-annotation><js:type name="Array"><js:type name="&quot;ui/tab-view&quot;:TabEntry"/></js:type></js:type-annotation></js:field><js:field name="selectedIndex"><js:doc><![CDATA[Gets or sets the selectedIndex of the TabView.]]></js:doc><js:type-annotation><js:number/></js:type-annotation></js:field><js:field name="android"><js:doc><![CDATA[Gets the native android widget that represents the user interface for this component. Valid only when running on Android OS.]]></js:doc><js:type-annotation><js:type name="android.support.v4.view:ViewPager"/></js:type-annotation></js:field><js:field name="ios"><js:doc><![CDATA[Gets the native iOS UIView that represents the user interface for this component. Valid only when running on iOS.]]></js:doc><js:type-annotation><js:type name="UITabBarController"/></js:type-annotation></js:field></js:class></js:module><js:module qname="&quot;ui/text-field&quot;"><js:class qname="&quot;ui/text-field&quot;:TextField"><js:doc><![CDATA[Represents a editable text field.]]></js:doc><js:extends><js:type name="&quot;ui/text-base&quot;:TextBase"/></js:extends><js:field name="android"><js:doc><![CDATA[Gets the native android widget that represents the user interface for this component. Valid only when running on Android OS.]]></js:doc><js:type-annotation><js:type name="android.widget:EditText"/></js:type-annotation></js:field><js:field name="ios"><js:doc><![CDATA[Gets the native iOS UIView that represents the user interface for this component. Valid only when running on iOS.]]></js:doc><js:type-annotation><js:type name="UITextField"/></js:type-annotation></js:field><js:field name="hint"><js:doc><![CDATA[Gets or sets the text of a text field hint/placeholder.]]></js:doc><js:type-annotation><js:string/></js:type-annotation></js:field><js:field name="secure"><js:doc><![CDATA[Gets or sets if a text field is for password entry.]]></js:doc><js:type-annotation><js:boolean/></js:type-annotation></js:field></js:class></js:module><js:module qname="&quot;ui/text-view&quot;"><js:class qname="&quot;ui/text-view&quot;:TextView"><js:doc><![CDATA[Represents an editable multiline text view.]]></js:doc><js:extends><js:type name="&quot;ui/text-base&quot;:TextBase"/></js:extends><js:field name="android"><js:doc><![CDATA[Gets the native android widget that represents the user interface for this component. Valid only when running on Android OS.]]></js:doc><js:type-annotation><js:type name="android.widget:EditText"/></js:type-annotation></js:field><js:field name="ios"><js:doc><![CDATA[Gets the native iOS UIView that represents the user interface for this component. Valid only when running on iOS.]]></js:doc><js:type-annotation><js:type name="UITextView"/></js:type-annotation></js:field><js:field name="editable"><js:doc><![CDATA[Gets or sets whether the instance is editable.]]></js:doc><js:type-annotation><js:boolean/></js:type-annotation></js:field></js:class></js:module><js:module qname="&quot;utils/containers&quot;"><js:interface qname="&quot;utils/containers&quot;:IEqualityComparer"><js:type-param name="T"/><js:method name="equals"><js:param name="x"><js:type-annotation><js:type-ref name="T"/></js:type-annotation></js:param><js:param name="y"><js:type-annotation><js:type-ref name="T"/></js:type-annotation></js:param><js:returns><js:boolean/></js:returns></js:method><js:method name="getHashCode"><js:param name="obj"><js:type-annotation><js:type-ref name="T"/></js:type-annotation></js:param><js:returns><js:number/></js:returns></js:method></js:interface><js:class qname="&quot;utils/containers&quot;:ArraySortHelper"><js:method name="sort" modifier="static"><js:type-param name="T"/><js:param name="keys"><js:type-annotation><js:type name="Array"><js:type-ref name="T"/></js:type></js:type-annotation></js:param><js:param name="index"><js:type-annotation><js:number/></js:type-annotation></js:param><js:param name="length"><js:type-annotation><js:number/></js:type-annotation></js:param><js:param name="compareFn"><js:type-annotation><js:function><js:param name="a"><js:type-annotation><js:type-ref name="T"/></js:type-annotation></js:param><js:param name="b"><js:type-annotation><js:type-ref name="T"/></js:type-annotation></js:param><js:returns><js:number/></js:returns></js:function></js:type-annotation></js:param></js:method></js:class><js:class qname="&quot;utils/containers&quot;:Dictionary"><js:type-param name="TKey"/><js:type-param name="TValue"/><js:field name="count"><js:type-annotation><js:number/></js:type-annotation></js:field><js:method name="forEach"><js:param name="callbackfn"><js:type-annotation><js:function><js:param name="key"><js:type-annotation><js:type-ref name="TKey"/></js:type-annotation></js:param><js:param name="value"><js:type-annotation><js:type-ref name="TValue"/></js:type-annotation></js:param></js:function></js:type-annotation></js:param></js:method><js:method name="clear"/><js:method name="remove"><js:param name="key"><js:type-annotation><js:type-ref name="TKey"/></js:type-annotation></js:param><js:returns><js:boolean/></js:returns></js:method><js:method name="get"><js:param name="key"><js:type-annotation><js:type-ref name="TKey"/></js:type-annotation></js:param><js:returns><js:type-ref name="TValue"/></js:returns></js:method><js:method name="has"><js:param name="key"><js:type-annotation><js:type-ref name="TKey"/></js:type-annotation></js:param><js:returns><js:boolean/></js:returns></js:method><js:method name="set"><js:param name="key"><js:type-annotation><js:type-ref name="TKey"/></js:type-annotation></js:param><js:param name="value"><js:type-annotation><js:type-ref name="TValue"/></js:type-annotation></js:param></js:method></js:class><js:class qname="&quot;utils/containers&quot;:StringComparer"><js:implements><js:type name="&quot;utils/containers&quot;:IEqualityComparer"><js:string/></js:type></js:implements><js:method name="equals"><js:param name="x"><js:type-annotation><js:string/></js:type-annotation></js:param><js:param name="y"><js:type-annotation><js:string/></js:type-annotation></js:param><js:returns><js:boolean/></js:returns></js:method><js:method name="getHashCode"><js:param name="str"><js:type-annotation><js:string/></js:type-annotation></js:param><js:returns><js:number/></js:returns></js:method></js:class></js:module><js:module qname="&quot;utils/utils&quot;"><js:module qname="&quot;utils/utils&quot;:ad"><js:module qname="&quot;utils/utils&quot;.ad:collections"><js:function name="stringArrayToStringSet"><js:param name="str"><js:type-annotation><js:array><js:string/></js:array></js:type-annotation></js:param><js:returns><js:object/></js:returns></js:function><js:function name="stringSetToStringArray"><js:param name="stringSet"><js:type-annotation><js:object/></js:type-annotation></js:param><js:returns><js:array><js:string/></js:array></js:returns></js:function></js:module><js:module qname="&quot;utils/utils&quot;.ad:layout"><js:var name="UNSPECIFIED"><js:type-annotation><js:number/></js:type-annotation></js:var><js:var name="EXACTLY"><js:type-annotation><js:number/></js:type-annotation></js:var><js:var name="AT_MOST"><js:type-annotation><js:number/></js:type-annotation></js:var><js:function name="getMeasureSpecMode"><js:param name="spec"><js:type-annotation><js:number/></js:type-annotation></js:param><js:returns><js:number/></js:returns></js:function><js:function name="getMeasureSpecSize"><js:param name="spec"><js:type-annotation><js:number/></js:type-annotation></js:param><js:returns><js:number/></js:returns></js:function><js:function name="makeMeasureSpec"><js:param name="size"><js:type-annotation><js:number/></js:type-annotation></js:param><js:param name="mode"><js:type-annotation><js:number/></js:type-annotation></js:param><js:returns><js:number/></js:returns></js:function><js:function name="getDisplayMetrics"><js:returns><js:type name="android.util:DisplayMetrics"/></js:returns></js:function><js:function name="getDisplayDensity"><js:returns><js:number/></js:returns></js:function><js:function name="getDevicePixels"><js:param name="independentPixels"><js:type-annotation><js:number/></js:type-annotation></js:param><js:param name="context"><js:type-annotation><js:type name="android.content:Context"/></js:type-annotation></js:param><js:returns><js:number/></js:returns></js:function><js:function name="getDeviceIndependentPixels"><js:param name="devicePixels"><js:type-annotation><js:number/></js:type-annotation></js:param><js:param name="context"><js:type-annotation><js:type name="android.content:Context"/></js:type-annotation></js:param><js:returns><js:number/></js:returns></js:function></js:module><js:module qname="&quot;utils/utils&quot;.ad:id"><js:var name="home"><js:type-annotation><js:number/></js:type-annotation></js:var></js:module><js:module qname="&quot;utils/utils&quot;.ad:resources"><js:function name="getDrawableId"><js:param name="name"/></js:function><js:function name="getStringId"><js:param name="name"/></js:function><js:function name="getId"><js:param name="name"><js:type-annotation><js:string/></js:type-annotation></js:param><js:returns><js:number/></js:returns></js:function></js:module><js:function name="async"><js:type-param name="T"/><js:param name="doInBackground"><js:type-annotation><js:function><js:returns><js:type-ref name="T"/></js:returns></js:function></js:type-annotation></js:param><js:param name="callback"><js:type-annotation><js:function><js:param name="result"><js:type-annotation><js:type-ref name="T"/></js:type-annotation></js:param></js:function></js:type-annotation></js:param></js:function></js:module><js:module qname="&quot;utils/utils&quot;:ios"><js:module qname="&quot;utils/utils&quot;.ios:collections"><js:function name="jsArrayToNSArray"><js:param name="str"><js:type-annotation><js:array><js:string/></js:array></js:type-annotation></js:param><js:returns><js:object/></js:returns></js:function><js:function name="nsArrayToJSArray"><js:param name="a"><js:type-annotation><js:object/></js:type-annotation></js:param><js:returns><js:array><js:string/></js:array></js:returns></js:function></js:module><js:function name="getColor"><js:param name="uiColor"><js:type-annotation><js:type name="UIColor"/></js:type-annotation></js:param><js:returns><js:type name="&quot;color&quot;:Color"/></js:returns></js:function><js:function name="getActualHeight"><js:param name="uiView"><js:type-annotation><js:type name="UIView"/></js:type-annotation></js:param><js:returns><js:number/></js:returns></js:function></js:module><js:function name="copyFrom"><js:param name="source"><js:type-annotation><js:object/></js:type-annotation></js:param><js:param name="target"><js:type-annotation><js:object/></js:type-annotation></js:param></js:function><js:function name="GC"/><js:module qname="&quot;utils/utils&quot;:platform"><js:var name="android"><js:type-annotation><js:string/></js:type-annotation></js:var><js:var name="ios"><js:type-annotation><js:string/></js:type-annotation></js:var></js:module><js:function name="targetPlatform"><js:returns><js:string/></js:returns></js:function></js:module><js:module qname="&quot;console&quot;"><js:class qname="&quot;console&quot;:Console"><js:doc><![CDATA[Encapsulates methods used to print some information in the console.
Instance of this class is declared in the global JavaScript context and is accessible by directly calling console.[xxx] methods.]]></js:doc><js:method name="time"><js:doc><![CDATA[Begins counting a time span for a given name (key).]]></js:doc><js:param name="reportName"><js:doc><![CDATA[The key for the operation.]]></js:doc><js:type-annotation><js:string/></js:type-annotation></js:param></js:method><js:method name="timeEnd"><js:doc><![CDATA[Ends a previously started time span through the time method.]]></js:doc><js:param name="reportName"><js:doc><![CDATA[The key for the operation. Must have an already started time(reportName) operation with the same key.]]></js:doc><js:type-annotation><js:string/></js:type-annotation></js:param></js:method><js:method name="assert"><js:doc><![CDATA[Asserts a boolean condition and prints a message in case the assert fails.]]></js:doc><js:param name="test"><js:doc><![CDATA[A value that should not be Falsy.]]></js:doc><js:type-annotation><js:boolean/></js:type-annotation></js:param><js:param name="message"><js:doc><![CDATA[The message to be displayed in case the asserted value is Falsy.]]></js:doc><js:type-annotation><js:string/></js:type-annotation></js:param><js:param name="formatParams" rest="true"><js:doc><![CDATA[Optional formatting parameters to be applied to the printed message.]]></js:doc><js:type-annotation><js:array><js:object/></js:array></js:type-annotation></js:param></js:method><js:method name="info"><js:doc><![CDATA[Reports some information.]]></js:doc><js:param name="message"><js:doc><![CDATA[The information message to be printed to the console.]]></js:doc><js:type-annotation><js:object/></js:type-annotation></js:param><js:param name="formatParams" rest="true"><js:doc><![CDATA[Optional formatting parameters to be applied to the printed message.]]></js:doc><js:type-annotation><js:array><js:object/></js:array></js:type-annotation></js:param></js:method><js:method name="warn"><js:doc><![CDATA[Reports a warning.]]></js:doc><js:param name="message"><js:doc><![CDATA[The warning message to be printed to the console.]]></js:doc><js:type-annotation><js:object/></js:type-annotation></js:param><js:param name="formatParams" rest="true"><js:doc><![CDATA[Optional formatting parameters to be applied to the printed message.]]></js:doc><js:type-annotation><js:array><js:object/></js:array></js:type-annotation></js:param></js:method><js:method name="error"><js:doc><![CDATA[Reports an error.]]></js:doc><js:param name="message"><js:doc><![CDATA[The error message to be printed to the console.]]></js:doc><js:type-annotation><js:object/></js:type-annotation></js:param><js:param name="formatParams" rest="true"><js:doc><![CDATA[Optional formatting parameters to be applied to the printed message.]]></js:doc><js:type-annotation><js:array><js:object/></js:array></js:type-annotation></js:param></js:method><js:method name="log"><js:doc><![CDATA[Verbously logs a message.]]></js:doc><js:param name="message"><js:doc><![CDATA[The message to be printed to the console.]]></js:doc><js:type-annotation><js:object/></js:type-annotation></js:param><js:param name="formatParams" rest="true"><js:doc><![CDATA[Optional formatting parameters to be applied to the printed message.]]></js:doc><js:type-annotation><js:array><js:object/></js:array></js:type-annotation></js:param></js:method><js:method name="trace"><js:doc><![CDATA[Prints the current stack trace in the console.]]></js:doc></js:method><js:method name="dump"><js:doc><![CDATA[Prints the state of the specified object to the console.]]></js:doc><js:param name="obj"><js:doc><![CDATA[The object instance to be dumped.]]></js:doc><js:type-annotation><js:object/></js:type-annotation></js:param></js:method><js:method name="dir"><js:doc><![CDATA[Prints the state of the specified object to the console.]]></js:doc><js:param name="obj"><js:type-annotation><js:object/></js:type-annotation></js:param></js:method></js:class></js:module><js:module qname="&quot;timer&quot;"><js:function name="setTimeout"><js:doc><![CDATA[Calls a function after a specified delay.]]></js:doc><js:param name="callback"><js:doc><![CDATA[The function to be called.]]></js:doc><js:type-annotation><js:type name="Function"/></js:type-annotation></js:param><js:param name="milliseconds" optional="true"><js:doc><![CDATA[The time to wait before the function is called. Defaults to 0.]]></js:doc><js:type-annotation><js:number/></js:type-annotation></js:param><js:returns><js:number/></js:returns></js:function><js:function name="clearTimeout"><js:doc><![CDATA[Clears the delay set by a call to the setTimeout function.]]></js:doc><js:param name="id"><js:doc><![CDATA[The identifier returned by the previously called setTimeout() method.]]></js:doc><js:type-annotation><js:number/></js:type-annotation></js:param></js:function><js:function name="setInterval"><js:doc><![CDATA[Calls a function repeatedly with a delay between each call.]]></js:doc><js:param name="callback"><js:doc><![CDATA[The function to be called.]]></js:doc><js:type-annotation><js:type name="Function"/></js:type-annotation></js:param><js:param name="milliseconds" optional="true"><js:doc><![CDATA[The delay between each function call.]]></js:doc><js:type-annotation><js:number/></js:type-annotation></js:param><js:returns><js:number/></js:returns></js:function><js:function name="clearInterval"><js:doc><![CDATA[Clears repeated function which was set up by calling setInterval().]]></js:doc><js:param name="id"><js:doc><![CDATA[The identifier returned by the setInterval() method.]]></js:doc><js:type-annotation><js:number/></js:type-annotation></js:param></js:function></js:module><js:module qname="&quot;local-settings&quot;"><js:function name="hasKey"><js:doc><![CDATA[Checks whether such a key exists.]]></js:doc><js:param name="key"><js:doc><![CDATA[The key to check for.]]></js:doc><js:type-annotation><js:string/></js:type-annotation></js:param><js:returns><js:boolean/></js:returns></js:function><js:function name="getBoolean"><js:doc><![CDATA[Gets a value (if existing) for a key as a Boolean Object. A default value can be provided in case there is no existing value.]]></js:doc><js:param name="key"><js:doc><![CDATA[The key to check for.]]></js:doc><js:type-annotation><js:string/></js:type-annotation></js:param><js:param name="defaultValue" optional="true"><js:doc><![CDATA[An optional value to be returned in case there is no existing value.]]></js:doc><js:type-annotation><js:boolean/></js:type-annotation></js:param><js:returns><js:boolean/></js:returns></js:function><js:function name="getString"><js:doc><![CDATA[Gets a value (if existing) for a key as a String Object. A default value can be provided in case there is no existing value.]]></js:doc><js:param name="key"><js:doc><![CDATA[The key to check for.]]></js:doc><js:type-annotation><js:string/></js:type-annotation></js:param><js:param name="defaultValue" optional="true"><js:doc><![CDATA[An optional value to be returned in case there is no existing value.]]></js:doc><js:type-annotation><js:string/></js:type-annotation></js:param><js:returns><js:string/></js:returns></js:function><js:function name="getNumber"><js:doc><![CDATA[Gets a value (if existing) for a key as a Number Object. A default value can be provided in case there is no existing value.]]></js:doc><js:param name="key"><js:doc><![CDATA[The key to check for.]]></js:doc><js:type-annotation><js:string/></js:type-annotation></js:param><js:param name="defaultValue" optional="true"><js:doc><![CDATA[An optional value to be returned in case there is no existing value.]]></js:doc><js:type-annotation><js:number/></js:type-annotation></js:param><js:returns><js:number/></js:returns></js:function><js:function name="setBoolean"><js:doc><![CDATA[Sets a Boolean Object for a key.]]></js:doc><js:param name="key"><js:doc><![CDATA[The key.]]></js:doc><js:type-annotation><js:string/></js:type-annotation></js:param><js:param name="value"><js:doc><![CDATA[The value.]]></js:doc><js:type-annotation><js:boolean/></js:type-annotation></js:param></js:function><js:function name="setString"><js:doc><![CDATA[Sets a String Object for a key.]]></js:doc><js:param name="key"><js:doc><![CDATA[The key.]]></js:doc><js:type-annotation><js:string/></js:type-annotation></js:param><js:param name="value"><js:doc><![CDATA[The value.]]></js:doc><js:type-annotation><js:string/></js:type-annotation></js:param></js:function><js:function name="setNumber"><js:doc><![CDATA[Sets a Number Object for a key.]]></js:doc><js:param name="key"><js:doc><![CDATA[The key.]]></js:doc><js:type-annotation><js:string/></js:type-annotation></js:param><js:param name="value"><js:doc><![CDATA[The value.]]></js:doc><js:type-annotation><js:number/></js:type-annotation></js:param></js:function><js:function name="remove"><js:doc><![CDATA[Removes a value (if existing) for a key.]]></js:doc><js:param name="key"><js:doc><![CDATA[The key to check for.]]></js:doc><js:type-annotation><js:string/></js:type-annotation></js:param></js:function></js:module><js:module qname="&quot;ui/dialogs&quot;"><js:module qname="&quot;ui/dialogs&quot;:inputType"><js:doc><![CDATA[Defines the input type for prompt dialog.]]></js:doc><js:var name="text"><js:type-annotation><js:string/></js:type-annotation></js:var><js:var name="password"><js:type-annotation><js:string/></js:type-annotation></js:var></js:module><js:function name="alert"><js:doc><![CDATA[The alert() method displays an alert box with a specified message.]]></js:doc><js:param name="message"><js:doc><![CDATA[Specifies the text to display in the alert box.]]></js:doc><js:type-annotation><js:string/></js:type-annotation></js:param><js:param name="options" optional="true"><js:doc><![CDATA[Specifies the options for the alert box. Optional.]]></js:doc><js:type-annotation><js:type name="&quot;ui/dialogs&quot;:AlertOptions"/></js:type-annotation></js:param><js:returns><js:type name="Promise"/></js:returns></js:function><js:function name="confirm"><js:doc><![CDATA[The confirm() method displays a dialog box with a specified message.]]></js:doc><js:param name="message"><js:doc><![CDATA[Specifies the text to display in the confirm box.]]></js:doc><js:type-annotation><js:string/></js:type-annotation></js:param><js:param name="options" optional="true"><js:doc><![CDATA[Specifies the options for the confirm box. Optional.]]></js:doc><js:type-annotation><js:type name="&quot;ui/dialogs&quot;:DialogButtonsOptions"/></js:type-annotation></js:param><js:returns><js:type name="Promise"><js:boolean/></js:type></js:returns></js:function><js:function name="prompt"><js:doc><![CDATA[The prompt() method displays a dialog box that prompts the visitor for input.]]></js:doc><js:param name="message"><js:doc><![CDATA[The text to display in the dialog box.]]></js:doc><js:type-annotation><js:string/></js:type-annotation></js:param><js:param name="defaultText" optional="true"><js:doc><![CDATA[The default text to display in the input box.]]></js:doc><js:type-annotation><js:string/></js:type-annotation></js:param><js:param name="options" optional="true"><js:doc><![CDATA[The options for the dialog box. Optional.]]></js:doc><js:type-annotation><js:type name="&quot;ui/dialogs&quot;:PromptOptions"/></js:type-annotation></js:param><js:returns><js:type name="Promise"><js:type name="&quot;ui/dialogs&quot;:PromptResult"/></js:type></js:returns></js:function><js:function name="login"><js:doc><![CDATA[The login() method displays a login dialog box that prompts the visitor for user name and password.]]></js:doc><js:param name="message"><js:doc><![CDATA[The text to display in the dialog box.]]></js:doc><js:type-annotation><js:string/></js:type-annotation></js:param><js:param name="userName" optional="true"><js:doc><![CDATA[The default text to display in the user name input box.]]></js:doc><js:type-annotation><js:string/></js:type-annotation></js:param><js:param name="password" optional="true"><js:doc><![CDATA[The default text to display in the password input box.]]></js:doc><js:type-annotation><js:string/></js:type-annotation></js:param><js:param name="options" optional="true"><js:doc><![CDATA[The options for the dialog box. Optional.]]></js:doc><js:type-annotation><js:type name="&quot;ui/dialogs&quot;:DialogButtonsOptions"/></js:type-annotation></js:param><js:returns><js:type name="Promise"><js:type name="&quot;ui/dialogs&quot;:LoginResult"/></js:type></js:returns></js:function><js:interface qname="&quot;ui/dialogs&quot;:DialogOptions"><js:doc><![CDATA[Provides options for the dialog.]]></js:doc><js:property name="title" optional="true"><js:doc><![CDATA[Gets or sets the dialog title.]]></js:doc><js:type-annotation><js:string/></js:type-annotation></js:property></js:interface><js:interface qname="&quot;ui/dialogs&quot;:AlertOptions"><js:doc><![CDATA[Provides options for the alert.]]></js:doc><js:extends><js:type name="&quot;ui/dialogs&quot;:DialogOptions"/></js:extends><js:property name="okButtonText" optional="true"><js:doc><![CDATA[Gets or sets the OK button text.]]></js:doc><js:type-annotation><js:string/></js:type-annotation></js:property></js:interface><js:interface qname="&quot;ui/dialogs&quot;:DialogButtonsOptions"><js:doc><![CDATA[Provides options for the confirm dialog.]]></js:doc><js:extends><js:type name="&quot;ui/dialogs&quot;:AlertOptions"/></js:extends><js:property name="cancelButtonText" optional="true"><js:doc><![CDATA[Gets or sets the Cancel button text.]]></js:doc><js:type-annotation><js:string/></js:type-annotation></js:property><js:property name="neutralButtonText" optional="true"><js:doc><![CDATA[Gets or sets the neutral button text.]]></js:doc><js:type-annotation><js:string/></js:type-annotation></js:property></js:interface><js:interface qname="&quot;ui/dialogs&quot;:PromptOptions"><js:doc><![CDATA[Provides options for the prompt dialog.]]></js:doc><js:extends><js:type name="&quot;ui/dialogs&quot;:DialogButtonsOptions"/></js:extends><js:property name="inputType" optional="true"><js:doc><![CDATA[Gets or sets the prompt input type (plain text or password).]]></js:doc><js:type-annotation><js:string/></js:type-annotation></js:property></js:interface><js:interface qname="&quot;ui/dialogs&quot;:PromptResult"><js:doc><![CDATA[Provides result data from the prompt dialog.]]></js:doc><js:property name="result"><js:doc><![CDATA[Gets or sets the prompt dialog boolean result.]]></js:doc><js:type-annotation><js:boolean/></js:type-annotation></js:property><js:property name="text"><js:doc><![CDATA[Gets or sets the text entered in the prompt dialog.]]></js:doc><js:type-annotation><js:string/></js:type-annotation></js:property></js:interface><js:interface qname="&quot;ui/dialogs&quot;:LoginResult"><js:doc><![CDATA[Provides result data from the login dialog.]]></js:doc><js:property name="result"><js:doc><![CDATA[Gets or sets the login dialog boolean result.]]></js:doc><js:type-annotation><js:boolean/></js:type-annotation></js:property><js:property name="userName"><js:doc><![CDATA[Gets or sets the user entered in the login dialog.]]></js:doc><js:type-annotation><js:string/></js:type-annotation></js:property><js:property name="password"><js:doc><![CDATA[Gets or sets the password entered in the login dialog.]]></js:doc><js:type-annotation><js:string/></js:type-annotation></js:property></js:interface><js:class qname="&quot;ui/dialogs&quot;:Dialog"><js:field name="show"><js:doc><![CDATA[Shows the dialog.]]></js:doc><js:type-annotation><js:function/></js:type-annotation></js:field><js:field name="hide"><js:doc><![CDATA[Hides the dialog.]]></js:doc><js:type-annotation><js:function/></js:type-annotation></js:field></js:class></js:module><js:module qname="&quot;ui/button&quot;"><js:module qname="&quot;ui/button&quot;:knownEvents"><js:doc><![CDATA[Known event names.]]></js:doc><js:var name="click"><js:type-annotation><js:string/></js:type-annotation></js:var></js:module><js:var name="textProperty"><js:type-annotation><js:type name="&quot;ui/core/dependency-observable&quot;:Property"/></js:type-annotation></js:var><js:class qname="&quot;ui/button&quot;:Button"><js:doc><![CDATA[Represents a standard Button widget.]]></js:doc><js:extends><js:type name="&quot;ui/core/view&quot;:View"/></js:extends><js:field name="android"><js:doc><![CDATA[Gets the native android widget that represents the user interface for this component. Valid only when running on Android OS.]]></js:doc><js:type-annotation><js:type name="android.widget:Button"/></js:type-annotation></js:field><js:field name="ios"><js:doc><![CDATA[Gets the native UIButton that represents the user interface for this component. Valid only when running on iOS.]]></js:doc><js:type-annotation><js:type name="UIButton"/></js:type-annotation></js:field><js:field name="text"><js:doc><![CDATA[Gets or sets the text (label) displayed by this instance.]]></js:doc><js:type-annotation><js:string/></js:type-annotation></js:field><js:method name="on"><js:param name="event"><js:type-annotation><js:string/></js:type-annotation></js:param><js:param name="callback"><js:type-annotation><js:function><js:param name="data"><js:type-annotation><js:type name="&quot;data/observable&quot;:EventData"/></js:type-annotation></js:param></js:function></js:type-annotation></js:param></js:method><js:method name="on"><js:param name="event"><js:type-annotation/></js:param><js:param name="callback"><js:type-annotation><js:function><js:param name="args"><js:type-annotation><js:type name="&quot;data/observable&quot;:EventData"/></js:type-annotation></js:param></js:function></js:type-annotation></js:param></js:method></js:class></js:module><js:module qname="&quot;ui/slider&quot;"><js:var name="valueProperty"><js:type-annotation><js:type name="&quot;ui/core/dependency-observable&quot;:Property"/></js:type-annotation></js:var><js:var name="minValueProperty"><js:type-annotation><js:type name="&quot;ui/core/dependency-observable&quot;:Property"/></js:type-annotation></js:var><js:var name="maxValueProperty"><js:type-annotation><js:type name="&quot;ui/core/dependency-observable&quot;:Property"/></js:type-annotation></js:var><js:class qname="&quot;ui/slider&quot;:Slider"><js:doc><![CDATA[Represents a slider component.]]></js:doc><js:extends><js:type name="&quot;ui/core/view&quot;:View"/></js:extends><js:field name="android"><js:doc><![CDATA[Gets the native android widget that represents the user interface for this component. Valid only when running on Android OS.]]></js:doc><js:type-annotation><js:type name="android.widget:SeekBar"/></js:type-annotation></js:field><js:field name="ios"><js:doc><![CDATA[Gets the native iOS UIView that represents the user interface for this component. Valid only when running on iOS.]]></js:doc><js:type-annotation><js:type name="UISlider"/></js:type-annotation></js:field><js:field name="value"><js:doc><![CDATA[Gets or sets a slider current value. The default value is 0.]]></js:doc><js:type-annotation><js:number/></js:type-annotation></js:field><js:field name="minValue"><js:doc><![CDATA[Gets or sets a slider min value. The default value is 0.]]></js:doc><js:type-annotation><js:number/></js:type-annotation></js:field><js:field name="maxValue"><js:doc><![CDATA[Gets or sets a slider max value. The default value is 100.]]></js:doc><js:type-annotation><js:number/></js:type-annotation></js:field></js:class></js:module><js:module qname="&quot;ui/switch&quot;"><js:var name="checkedProperty"><js:type-annotation><js:type name="&quot;ui/core/dependency-observable&quot;:Property"/></js:type-annotation></js:var><js:class qname="&quot;ui/switch&quot;:Switch"><js:doc><![CDATA[Represents a switch component.]]></js:doc><js:extends><js:type name="&quot;ui/core/view&quot;:View"/></js:extends><js:field name="android"><js:doc><![CDATA[Gets the native android widget that represents the user interface for this component. Valid only when running on Android OS.]]></js:doc><js:type-annotation><js:type name="android.widget:Switch"/></js:type-annotation></js:field><js:field name="ios"><js:doc><![CDATA[Gets the native iOS UIView that represents the user interface for this component. Valid only when running on iOS.]]></js:doc><js:type-annotation><js:type name="UISwitch"/></js:type-annotation></js:field><js:field name="checked"><js:doc><![CDATA[Gets or sets if a switch is checked or not.]]></js:doc><js:type-annotation><js:boolean/></js:type-annotation></js:field></js:class></js:module><js:module qname="&quot;ui/activity-indicator&quot;"><js:var name="busyProperty"><js:type-annotation><js:type name="&quot;ui/core/dependency-observable&quot;:Property"/></js:type-annotation></js:var><js:class qname="&quot;ui/activity-indicator&quot;:ActivityIndicator"><js:doc><![CDATA[Represents a UI widget which displays a progress indicator hinting the user for some background operation running.]]></js:doc><js:extends><js:type name="&quot;ui/core/view&quot;:View"/></js:extends><js:field name="android"><js:doc><![CDATA[Gets the native android widget that represents the user interface for this component. Valid only when running on Android OS.]]></js:doc><js:type-annotation><js:type name="android.widget:ProgressBar"/></js:type-annotation></js:field><js:field name="ios"><js:doc><![CDATA[Gets the native iOS UIActivityIndicatorView that represents the user interface for this component. Valid only when running on iOS.]]></js:doc><js:type-annotation><js:type name="UIActivityIndicatorView"/></js:type-annotation></js:field><js:field name="busy"><js:doc><![CDATA[Gets or sets a value indicating whether the widget is currently displaying progress.]]></js:doc><js:type-annotation><js:boolean/></js:type-annotation></js:field></js:class></js:module><js:module qname="&quot;ui/progress&quot;"><js:var name="valueProperty"><js:type-annotation><js:type name="&quot;ui/core/dependency-observable&quot;:Property"/></js:type-annotation></js:var><js:var name="maxValueProperty"><js:type-annotation><js:type name="&quot;ui/core/dependency-observable&quot;:Property"/></js:type-annotation></js:var><js:class qname="&quot;ui/progress&quot;:Progress"><js:doc><![CDATA[Represents a progress component.]]></js:doc><js:extends><js:type name="&quot;ui/core/view&quot;:View"/></js:extends><js:field name="android"><js:doc><![CDATA[Gets the native android widget that represents the user interface for this component. Valid only when running on Android OS.]]></js:doc><js:type-annotation><js:type name="android.widget:ProgressBar"/></js:type-annotation></js:field><js:field name="ios"><js:doc><![CDATA[Gets the native iOS UIView that represents the user interface for this component. Valid only when running on iOS.]]></js:doc><js:type-annotation><js:type name="UIProgressView"/></js:type-annotation></js:field><js:field name="value"><js:doc><![CDATA[Gets or sets a progress current value.]]></js:doc><js:type-annotation><js:number/></js:type-annotation></js:field><js:field name="maxValue"><js:doc><![CDATA[Gets or sets a progress max value.]]></js:doc><js:type-annotation><js:number/></js:type-annotation></js:field></js:class></js:module><js:module qname="&quot;ui/search-bar&quot;"><js:var name="textProperty"><js:type-annotation><js:type name="&quot;ui/core/dependency-observable&quot;:Property"/></js:type-annotation></js:var><js:module qname="&quot;ui/search-bar&quot;:knownEvents"><js:doc><![CDATA[Known event names.]]></js:doc><js:var name="submit"><js:type-annotation><js:string/></js:type-annotation></js:var><js:var name="clear"><js:type-annotation><js:string/></js:type-annotation></js:var></js:module><js:class qname="&quot;ui/search-bar&quot;:SearchBar"><js:doc><![CDATA[Represents a search bar component.]]></js:doc><js:extends><js:type name="&quot;ui/core/view&quot;:View"/></js:extends><js:field name="android"><js:doc><![CDATA[Gets the native android widget that represents the user interface for this component. Valid only when running on Android OS.]]></js:doc><js:type-annotation><js:type name="android.widget:SearchView"/></js:type-annotation></js:field><js:field name="ios"><js:doc><![CDATA[Gets the native iOS UIView that represents the user interface for this component. Valid only when running on iOS.]]></js:doc><js:type-annotation><js:type name="UISearchBar"/></js:type-annotation></js:field><js:field name="text"><js:doc><![CDATA[Gets or sets a search bar text.]]></js:doc><js:type-annotation><js:string/></js:type-annotation></js:field><js:method name="on"><js:param name="event"><js:type-annotation><js:string/></js:type-annotation></js:param><js:param name="callback"><js:type-annotation><js:function><js:param name="data"><js:type-annotation><js:type name="&quot;data/observable&quot;:EventData"/></js:type-annotation></js:param></js:function></js:type-annotation></js:param></js:method><js:method name="on"><js:doc><![CDATA[Raised when a search bar search is submitted.]]></js:doc><js:param name="event"><js:type-annotation/></js:param><js:param name="callback"><js:type-annotation><js:function><js:param name="args"><js:type-annotation><js:type name="&quot;data/observable&quot;:EventData"/></js:type-annotation></js:param></js:function></js:type-annotation></js:param></js:method><js:method name="on"><js:doc><![CDATA[Raised when a search bar search is closed.]]></js:doc><js:param name="event"><js:type-annotation/></js:param><js:param name="callback"><js:type-annotation><js:function><js:param name="args"><js:type-annotation><js:type name="&quot;data/observable&quot;:EventData"/></js:type-annotation></js:param></js:function></js:type-annotation></js:param></js:method></js:class></js:module><js:module qname="&quot;ui/list-view&quot;"><js:var name="itemsProperty"><js:type-annotation><js:type name="&quot;ui/core/dependency-observable&quot;:Property"/></js:type-annotation></js:var><js:var name="isScrollingProperty"><js:type-annotation><js:type name="&quot;ui/core/dependency-observable&quot;:Property"/></js:type-annotation></js:var><js:module qname="&quot;ui/list-view&quot;:knownEvents"><js:doc><![CDATA[Known event names.]]></js:doc><js:var name="itemLoading"><js:type-annotation><js:string/></js:type-annotation></js:var><js:var name="itemTap"><js:type-annotation><js:string/></js:type-annotation></js:var><js:var name="loadMoreItems"><js:type-annotation><js:string/></js:type-annotation></js:var></js:module><js:class qname="&quot;ui/list-view&quot;:ListView"><js:doc><![CDATA[Represents a view that shows items in a vertically scrolling list.]]></js:doc><js:extends><js:type name="&quot;ui/core/view&quot;:View"/></js:extends><js:field name="android"><js:doc><![CDATA[Gets the native android widget (android.widget.ListView) that represents the user interface for this component. Valid only when running on Android OS.]]></js:doc><js:type-annotation><js:type name="android.widget:ListView"/></js:type-annotation></js:field><js:field name="ios"><js:doc><![CDATA[Gets the native iOS view (UITableView) that represents the user interface for this component. Valid only when running on iOS.]]></js:doc><js:type-annotation><js:type name="UITableView"/></js:type-annotation></js:field><js:field name="isScrolling"><js:doc><![CDATA[Gets a value indicating whether the ListView is currently scrolling.]]></js:doc><js:type-annotation><js:boolean/></js:type-annotation></js:field><js:field name="items"><js:doc><![CDATA[Gets or set the items collection of the ListView. 
The items property can be set to an array or an object defining length and getItem(index) method.]]></js:doc><js:type-annotation><js:object/></js:type-annotation></js:field><js:method name="refresh"><js:doc><![CDATA[Forces the ListView to reload all its items.]]></js:doc></js:method><js:method name="on"><js:param name="event"><js:type-annotation><js:string/></js:type-annotation></js:param><js:param name="callback"><js:type-annotation><js:function><js:param name="data"><js:type-annotation><js:type name="&quot;data/observable&quot;:EventData"/></js:type-annotation></js:param></js:function></js:type-annotation></js:param></js:method><js:method name="on"><js:doc><![CDATA[Raised when a View for the data at the specified index should be created. 
The result should be returned trough the view property of the event data.
Note, that the view property of the event data can be pre-initialized with 
an old instance of a view, so that it can be reused. ]]></js:doc><js:param name="event"><js:type-annotation/></js:param><js:param name="callback"><js:type-annotation><js:function><js:param name="args"><js:type-annotation><js:type name="&quot;ui/list-view&quot;:ItemEventData"/></js:type-annotation></js:param></js:function></js:type-annotation></js:param></js:method><js:method name="on"><js:doc><![CDATA[Raised when an item inside the ListView is tapped.]]></js:doc><js:param name="event"><js:type-annotation/></js:param><js:param name="callback"><js:type-annotation><js:function><js:param name="args"><js:type-annotation><js:type name="&quot;ui/list-view&quot;:ItemEventData"/></js:type-annotation></js:param></js:function></js:type-annotation></js:param></js:method><js:method name="on"><js:doc><![CDATA[Raised when the ListView is scrolled so that its last item is visible.]]></js:doc><js:param name="event"><js:type-annotation/></js:param><js:param name="callback"><js:type-annotation><js:function><js:param name="args"><js:type-annotation><js:type name="&quot;data/observable&quot;:EventData"/></js:type-annotation></js:param></js:function></js:type-annotation></js:param></js:method></js:class><js:interface qname="&quot;ui/list-view&quot;:ItemEventData"><js:doc><![CDATA[Event data containing information for the index and the view associated to a list view item.]]></js:doc><js:extends><js:type name="&quot;data/observable&quot;:EventData"/></js:extends><js:property name="index"><js:doc><![CDATA[The index of the item, for which the event is raised.]]></js:doc><js:type-annotation><js:number/></js:type-annotation></js:property><js:property name="view"><js:doc><![CDATA[The view that is associated to the item, for which the event is raised.]]></js:doc><js:type-annotation><js:type name="&quot;ui/core/view&quot;:View"/></js:type-annotation></js:property></js:interface></js:module><js:module qname="&quot;ui/scroll-view&quot;"><js:class qname="&quot;ui/scroll-view&quot;:ScrollView"><js:extends><js:type name="&quot;ui/core/view&quot;:View"/></js:extends><js:field name="android"><js:type-annotation><js:type name="android.widget:ScrollView"/></js:type-annotation></js:field><js:field name="ios"><js:type-annotation><js:type name="UIScrollView"/></js:type-annotation></js:field><js:method name="on"><js:param name="event"><js:type-annotation/></js:param><js:param name="callback"><js:type-annotation><js:function><js:param name="data"><js:type-annotation><js:type name="&quot;data/observable&quot;:EventData"/></js:type-annotation></js:param></js:function></js:type-annotation></js:param></js:method><js:method name="on"><js:param name="event"><js:type-annotation><js:string/></js:type-annotation></js:param><js:param name="callback"><js:type-annotation><js:function><js:param name="data"><js:type-annotation><js:type name="&quot;data/observable&quot;:EventData"/></js:type-annotation></js:param></js:function></js:type-annotation></js:param></js:method><js:method name="off"><js:param name="event"><js:type-annotation/></js:param><js:param name="callback" optional="true"><js:type-annotation><js:function><js:param name="data"><js:type-annotation><js:type name="&quot;data/observable&quot;:EventData"/></js:type-annotation></js:param></js:function></js:type-annotation></js:param></js:method><js:method name="off"><js:param name="event"><js:type-annotation><js:string/></js:type-annotation></js:param><js:param name="callback" optional="true"><js:type-annotation><js:function><js:param name="data"><js:type-annotation><js:type name="&quot;data/observable&quot;:EventData"/></js:type-annotation></js:param></js:function></js:type-annotation></js:param></js:method></js:class></js:module><js:module qname="&quot;ui/web-view&quot;"><js:class qname="&quot;ui/web-view&quot;:WebView"><js:extends><js:type name="&quot;ui/core/view&quot;:View"/></js:extends><js:field name="android"><js:type-annotation><js:type name="android.webkit:WebView"/></js:type-annotation></js:field><js:field name="ios"><js:type-annotation><js:type name="UIWebView"/></js:type-annotation></js:field><js:field name="url"><js:type-annotation><js:string/></js:type-annotation></js:field><js:field name="canGoBack"><js:type-annotation><js:boolean/></js:type-annotation></js:field><js:field name="canGoForward"><js:type-annotation><js:boolean/></js:type-annotation></js:field><js:method name="goBack"/><js:method name="goForward"/><js:method name="eval"><js:param name="script"><js:type-annotation><js:string/></js:type-annotation></js:param></js:method><js:method name="loadData"><js:param name="data"><js:type-annotation><js:string/></js:type-annotation></js:param><js:param name="baseURL" optional="true"><js:type-annotation><js:string/></js:type-annotation></js:param><js:param name="mimeType" optional="true"><js:type-annotation><js:string/></js:type-annotation></js:param><js:param name="encoding" optional="true"><js:type-annotation><js:string/></js:type-annotation></js:param></js:method></js:class></js:module><js:module qname="&quot;media-player&quot;"><js:function name="playAudioFile"><js:doc><![CDATA[play audio file]]></js:doc><js:param name="path"><js:type-annotation><js:string/></js:type-annotation></js:param><js:returns><js:type name="Promise"/></js:returns></js:function><js:function name="playAudioURL"><js:doc><![CDATA[play audio file]]></js:doc><js:param name="url"><js:type-annotation><js:string/></js:type-annotation></js:param><js:returns><js:type name="Promise"/></js:returns></js:function><js:function name="playVideoURL"><js:doc><![CDATA[play video file]]></js:doc><js:param name="url"><js:type-annotation><js:string/></js:type-annotation></js:param><js:param name="view"><js:type-annotation><js:type name="&quot;ui/core/view&quot;:View"/></js:type-annotation></js:param><js:returns><js:type name="Promise"/></js:returns></js:function><js:function name="playVideoFile"><js:doc><![CDATA[play video file]]></js:doc><js:param name="path"><js:type-annotation><js:string/></js:type-annotation></js:param><js:param name="view"><js:type-annotation><js:type name="&quot;ui/core/view&quot;:View"/></js:type-annotation></js:param><js:returns><js:type name="Promise"/></js:returns></js:function></js:module><js:module qname="&quot;file-system&quot;"><js:class qname="&quot;file-system&quot;:FileSystemEntity"><js:doc><![CDATA[Represents a single entity on the file system.]]></js:doc><js:field name="lastModified"><js:doc><![CDATA[Gets the Date object specifying the last time this entity was modified.]]></js:doc><js:type-annotation><js:type name="Date"/></js:type-annotation></js:field><js:field name="name"><js:doc><![CDATA[Gets the name of the entity.]]></js:doc><js:type-annotation><js:string/></js:type-annotation></js:field><js:field name="path"><js:doc><![CDATA[Gets the fully-qualified path (including the extension for a File) of the entity.]]></js:doc><js:type-annotation><js:string/></js:type-annotation></js:field><js:field name="parent"><js:doc><![CDATA[Gets the Folder object representing the parent of this entity. 
Will be null for a root folder like Documents or Temporary.
This property is readonly.]]></js:doc><js:type-annotation><js:type name="&quot;file-system&quot;:Folder"/></js:type-annotation></js:field><js:method name="remove"><js:doc><![CDATA[Removes (deletes) the current Entity from the file system.]]></js:doc><js:returns><js:type name="Promise"><js:object/></js:type></js:returns></js:method><js:method name="rename"><js:doc><![CDATA[Renames the current entity using the specified name.]]></js:doc><js:param name="newName"><js:doc><![CDATA[The new name to be applied to the entity.]]></js:doc><js:type-annotation><js:string/></js:type-annotation></js:param><js:returns><js:type name="Promise"><js:object/></js:type></js:returns></js:method></js:class><js:class qname="&quot;file-system&quot;:File"><js:doc><![CDATA[Represents a File entity on the file system.]]></js:doc><js:extends><js:type name="&quot;file-system&quot;:FileSystemEntity"/></js:extends><js:method name="exists" modifier="static"><js:doc><![CDATA[Checks whether a File with the specified path already exists.]]></js:doc><js:param name="path"><js:doc><![CDATA[The path to check for.]]></js:doc><js:type-annotation><js:string/></js:type-annotation></js:param><js:returns><js:boolean/></js:returns></js:method><js:field name="extension"><js:doc><![CDATA[Gets the extension of the file.]]></js:doc><js:type-annotation><js:string/></js:type-annotation></js:field><js:field name="isLocked"><js:doc><![CDATA[Gets a value indicating whether the file is currently locked, meaning a background operation associated with this file is running.]]></js:doc><js:type-annotation><js:boolean/></js:type-annotation></js:field><js:method name="fromPath" modifier="static"><js:doc><![CDATA[Gets or creates a File entity at the specified path.]]></js:doc><js:param name="path"><js:doc><![CDATA[The path to get/create the file at.]]></js:doc><js:type-annotation><js:string/></js:type-annotation></js:param><js:returns><js:type name="&quot;file-system&quot;:File"/></js:returns></js:method><js:method name="readText"><js:doc><![CDATA[Reads the content of the file as a string using the specified encoding (defaults to UTF-8).]]></js:doc><js:param name="encoding" optional="true"><js:doc><![CDATA[An optional value specifying the preferred encoding (defaults to UTF-8).]]></js:doc><js:type-annotation><js:string/></js:type-annotation></js:param><js:returns><js:type name="Promise"><js:string/></js:type></js:returns></js:method><js:method name="writeText"><js:doc><![CDATA[Writes the provided string to the file, using the specified encoding (defaults to UTF-8).]]></js:doc><js:param name="content"><js:doc><![CDATA[The content to be saved to the file.]]></js:doc><js:type-annotation><js:string/></js:type-annotation></js:param><js:param name="encoding" optional="true"><js:doc><![CDATA[An optional value specifying the preferred encoding (defaults to UTF-8).]]></js:doc><js:type-annotation><js:string/></js:type-annotation></js:param><js:returns><js:type name="Promise"><js:object/></js:type></js:returns></js:method></js:class><js:class qname="&quot;file-system&quot;:Folder"><js:doc><![CDATA[Represents a Folder (directory) entity on the file system.]]></js:doc><js:extends><js:type name="&quot;file-system&quot;:FileSystemEntity"/></js:extends><js:field name="isKnown"><js:doc><![CDATA[Determines whether this instance is a KnownFolder (accessed through the KnownFolders object).]]></js:doc><js:type-annotation><js:boolean/></js:type-annotation></js:field><js:method name="fromPath" modifier="static"><js:doc><![CDATA[Gets or creates a Folder entity at the specified path.]]></js:doc><js:param name="path"><js:doc><![CDATA[The path to get/create the folder at.]]></js:doc><js:type-annotation><js:string/></js:type-annotation></js:param><js:returns><js:type name="&quot;file-system&quot;:Folder"/></js:returns></js:method><js:method name="exists" modifier="static"><js:doc><![CDATA[Checks whether a Folder with the specified path already exists.]]></js:doc><js:param name="path"><js:doc><![CDATA[The path to check for.]]></js:doc><js:type-annotation><js:string/></js:type-annotation></js:param><js:returns><js:boolean/></js:returns></js:method><js:method name="contains"><js:doc><![CDATA[Checks whether this Folder contains an Entity with the specified name.
The path of the folder is added to the name to resolve the complete path to check for.]]></js:doc><js:param name="name"><js:doc><![CDATA[The name of the entity to check for.]]></js:doc><js:type-annotation><js:string/></js:type-annotation></js:param><js:returns><js:boolean/></js:returns></js:method><js:method name="clear"><js:doc><![CDATA[Deletes all the files and folders (recursively), contained within this Folder.]]></js:doc><js:returns><js:type name="Promise"><js:object/></js:type></js:returns></js:method><js:method name="getFile"><js:doc><![CDATA[Gets or creates a File entity with the specified name within this Folder.]]></js:doc><js:param name="name"><js:doc><![CDATA[The name of the file to get/create.]]></js:doc><js:type-annotation><js:string/></js:type-annotation></js:param><js:returns><js:type name="&quot;file-system&quot;:File"/></js:returns></js:method><js:method name="getFolder"><js:doc><![CDATA[Gets or creates a Folder entity with the specified name within this Folder.]]></js:doc><js:param name="name"><js:doc><![CDATA[The name of the folder to get/create.]]></js:doc><js:type-annotation><js:string/></js:type-annotation></js:param><js:returns><js:type name="&quot;file-system&quot;:Folder"/></js:returns></js:method><js:method name="getEntities"><js:doc><![CDATA[Gets all the top-level entities residing within this folder.]]></js:doc><js:returns><js:type name="Promise"><js:type name="Array"><js:type name="&quot;file-system&quot;:FileSystemEntity"/></js:type></js:type></js:returns></js:method><js:method name="eachEntity"><js:doc><![CDATA[Enumerates all the top-level FileSystem entities residing within this folder.]]></js:doc><js:param name="onEntity"><js:doc><![CDATA[A callback that receives the current entity. If the callback returns false this will mean for the iteration to stop.]]></js:doc><js:type-annotation><js:function><js:param name="entity"><js:type-annotation><js:type name="&quot;file-system&quot;:FileSystemEntity"/></js:type-annotation></js:param><js:returns><js:boolean/></js:returns></js:function></js:type-annotation></js:param></js:method></js:class><js:module qname="&quot;file-system&quot;:knownFolders"><js:doc><![CDATA[Provides access to the top-level Folders instances that are accessible from the application. Use these as entry points to access the FileSystem.]]></js:doc><js:function name="documents"><js:doc><![CDATA[Gets the Documents folder available for the current application. This Folder is private for the application and not accessible from Users/External apps.]]></js:doc><js:returns><js:type name="&quot;file-system&quot;:Folder"/></js:returns></js:function><js:function name="temp"><js:doc><![CDATA[Gets the Temporary (Caches) folder available for the current application. This Folder is private for the application and not accessible from Users/External apps.]]></js:doc><js:returns><js:type name="&quot;file-system&quot;:Folder"/></js:returns></js:function><js:function name="currentApp"><js:doc><![CDATA[Gets the root folder for the current application. This Folder is private for the application and not accessible from Users/External apps.]]></js:doc><js:returns><js:type name="&quot;file-system&quot;:Folder"/></js:returns></js:function></js:module><js:module qname="&quot;file-system&quot;:path"><js:doc><![CDATA[Enables path-specific operations like join, extension, etc.]]></js:doc><js:function name="normalize"><js:doc><![CDATA[Normalizes a path, taking care of occurrances like ".." and "//".]]></js:doc><js:param name="path"><js:doc><![CDATA[The path to be normalized.]]></js:doc><js:type-annotation><js:string/></js:type-annotation></js:param><js:returns><js:string/></js:returns></js:function><js:function name="join"><js:doc><![CDATA[Joins all the provided string components, forming a valid and normalized path.]]></js:doc><js:param name="paths" rest="true"><js:doc><![CDATA[An array of string components to be joined.]]></js:doc><js:type-annotation><js:array><js:string/></js:array></js:type-annotation></js:param><js:returns><js:string/></js:returns></js:function><js:var name="separator"><js:type-annotation><js:string/></js:type-annotation></js:var></js:module></js:module><js:module qname="&quot;data/observable&quot;"><js:interface qname="&quot;data/observable&quot;:EventData"><js:doc><![CDATA[Base event data.]]></js:doc><js:property name="eventName"><js:doc><![CDATA[The name of the event.]]></js:doc><js:type-annotation><js:string/></js:type-annotation></js:property><js:property name="object"><js:doc><![CDATA[The Observable instance that has raised the event.]]></js:doc><js:type-annotation><js:type name="&quot;data/observable&quot;:Observable"/></js:type-annotation></js:property></js:interface><js:interface qname="&quot;data/observable&quot;:PropertyChangeData"><js:doc><![CDATA[Data for the "propertyChange" event.]]></js:doc><js:extends><js:type name="&quot;data/observable&quot;:EventData"/></js:extends><js:property name="propertyName"><js:doc><![CDATA[The name of the property that has changed.]]></js:doc><js:type-annotation><js:string/></js:type-annotation></js:property><js:property name="value"><js:doc><![CDATA[The new value of the property.]]></js:doc><js:type-annotation><js:object/></js:type-annotation></js:property></js:interface><js:module qname="&quot;data/observable&quot;:knownEvents"><js:doc><![CDATA[Known event names.]]></js:doc><js:var name="propertyChange"><js:type-annotation><js:string/></js:type-annotation></js:var></js:module><js:class qname="&quot;data/observable&quot;:Observable"><js:doc><![CDATA[Observable is used when you want to be notified when a change occurs. Use on/off methods to add/remove listener.]]></js:doc><js:field name="typeName"><js:doc><![CDATA[Gets the name of the constructor function for this instance. E.g. for a Button class this will return "Button".]]></js:doc><js:type-annotation><js:string/></js:type-annotation></js:field><js:method name="on"><js:doc><![CDATA[Shortcut alias to the addEventListener method.]]></js:doc><js:param name="eventNames"><js:type-annotation><js:string/></js:type-annotation></js:param><js:param name="callback"><js:type-annotation><js:function><js:param name="data"><js:type-annotation><js:type name="&quot;data/observable&quot;:EventData"/></js:type-annotation></js:param></js:function></js:type-annotation></js:param><js:param name="thisArg" optional="true"><js:type-annotation><js:object/></js:type-annotation></js:param></js:method><js:method name="off"><js:doc><![CDATA[Shortcut alias to the removeEventListener method.]]></js:doc><js:param name="eventNames"><js:type-annotation><js:string/></js:type-annotation></js:param><js:param name="callback" optional="true"><js:type-annotation><js:object/></js:type-annotation></js:param></js:method><js:method name="addEventListener"><js:doc><![CDATA[Adds a listener for the specified event name.]]></js:doc><js:param name="eventNames"><js:doc><![CDATA[Comma delimited names of the events to attach the listener to.]]></js:doc><js:type-annotation><js:string/></js:type-annotation></js:param><js:param name="callback"><js:doc><![CDATA[A function to be called when some of the specified event(s) is raised.]]></js:doc><js:type-annotation><js:function><js:param name="data"><js:type-annotation><js:type name="&quot;data/observable&quot;:EventData"/></js:type-annotation></js:param></js:function></js:type-annotation></js:param><js:param name="thisArg" optional="true"><js:doc><![CDATA[An optional parameter which when set will be used as "this" in callback method call.]]></js:doc><js:type-annotation><js:object/></js:type-annotation></js:param></js:method><js:method name="removeEventListener"><js:doc><![CDATA[Removes listener(s) for the specified event name.]]></js:doc><js:param name="eventNames"><js:doc><![CDATA[Comma delimited names of the events the specified listener is associated with.]]></js:doc><js:type-annotation><js:string/></js:type-annotation></js:param><js:param name="callback" optional="true"><js:doc><![CDATA[An optional parameter pointing to a specific listener. If not defined, all listeners for the event names will be removed.]]></js:doc><js:type-annotation><js:object/></js:type-annotation></js:param><js:param name="thisArg" optional="true"><js:doc><![CDATA[An optional parameter which when set will be used to refine search of the correct callback which will be removed as event listener.]]></js:doc><js:type-annotation><js:object/></js:type-annotation></js:param></js:method><js:method name="set"><js:doc><![CDATA[Updates the specified property with the provided value.]]></js:doc><js:param name="name"><js:type-annotation><js:string/></js:type-annotation></js:param><js:param name="value"><js:type-annotation><js:object/></js:type-annotation></js:param></js:method><js:method name="get"><js:doc><![CDATA[Gets the value of the specified property.]]></js:doc><js:param name="name"><js:type-annotation><js:string/></js:type-annotation></js:param><js:returns><js:object/></js:returns></js:method><js:method name="notify"><js:doc><![CDATA[Notifies all the registered listeners for the event provided in the data.eventName.]]></js:doc><js:param name="data"><js:doc><![CDATA[The data associated with the event.]]></js:doc><js:type-annotation><js:type name="&quot;data/observable&quot;:EventData"/></js:type-annotation></js:param></js:method><js:method name="hasListeners"><js:doc><![CDATA[Checks whether a listener is registered for the specified event name.]]></js:doc><js:param name="eventName"><js:doc><![CDATA[The name of the event to check for.]]></js:doc><js:type-annotation><js:string/></js:type-annotation></js:param><js:returns><js:boolean/></js:returns></js:method><js:method name="_setCore"><js:doc><![CDATA[This method is intended to be overriden by inheritors to provide additional implementation.]]></js:doc><js:param name="data"><js:type-annotation><js:type name="&quot;data/observable&quot;:PropertyChangeData"/></js:type-annotation></js:param></js:method><js:method name="_createPropertyChangeData"><js:param name="name"><js:type-annotation><js:string/></js:type-annotation></js:param><js:param name="value"><js:type-annotation><js:object/></js:type-annotation></js:param><js:returns><js:type name="&quot;data/observable&quot;:PropertyChangeData"/></js:returns></js:method><js:method name="_emit"><js:param name="eventNames"><js:type-annotation><js:string/></js:type-annotation></js:param></js:method></js:class></js:module><js:module qname="&quot;xml&quot;"><js:class qname="&quot;xml&quot;:ParserEventType"><js:doc><![CDATA[Specifies the type of parser event.]]></js:doc><js:field name="StartElement" modifier="static"><js:doc><![CDATA[Specifies the StartElement event type.]]></js:doc><js:type-annotation><js:string/></js:type-annotation></js:field><js:field name="EndElement" modifier="static"><js:doc><![CDATA[Specifies the EndElement event type.]]></js:doc><js:type-annotation><js:string/></js:type-annotation></js:field><js:field name="Text" modifier="static"><js:doc><![CDATA[Specifies the Text event type.]]></js:doc><js:type-annotation><js:string/></js:type-annotation></js:field><js:field name="CDATA" modifier="static"><js:doc><![CDATA[Specifies the CDATA event type.]]></js:doc><js:type-annotation><js:string/></js:type-annotation></js:field><js:field name="Comment" modifier="static"><js:doc><![CDATA[Specifies the Comment event type.]]></js:doc><js:type-annotation><js:string/></js:type-annotation></js:field></js:class><js:interface qname="&quot;xml&quot;:ParserEvent"><js:doc><![CDATA[Provides information for a parser event.]]></js:doc><js:property name="eventType"><js:doc><![CDATA[Returns the type of the parser event. This is one of the ParserEventType static members.]]></js:doc><js:type-annotation><js:string/></js:type-annotation></js:property><js:property name="elementName" optional="true"><js:doc><![CDATA[Returns the name of the element in case the eventType is ParserEventType.StartElement or ParserEventType.EndElement.]]></js:doc><js:type-annotation><js:string/></js:type-annotation></js:property><js:property name="attributes" optional="true"><js:doc><![CDATA[Returns a JSON object with the attributes of an element in case the eventType is ParserEventType.StartElement.]]></js:doc><js:type-annotation><js:type name="Object"/></js:type-annotation></js:property><js:property name="data" optional="true"><js:doc><![CDATA[Returns the relevant data in case the eventType is ParserEventType.Text, ParserEventType.CDATA or ParserEventType.Comment.]]></js:doc><js:type-annotation><js:string/></js:type-annotation></js:property><js:method name="toString"><js:doc><![CDATA[Returns a JSON string representation of this instance.]]></js:doc><js:returns><js:string/></js:returns></js:method></js:interface><js:class qname="&quot;xml&quot;:XmlParser"><js:doc><![CDATA[A simple non-validating SAX parser based on https://github.com/vflash/easysax version 0.1.14]]></js:doc><js:method name="parse"><js:doc><![CDATA[Parses the supplied xml string.]]></js:doc><js:param name="xmlString"><js:doc><![CDATA[The string containing the xml to parse.]]></js:doc><js:type-annotation><js:string/></js:type-annotation></js:param></js:method></js:class></js:module><js:module qname="&quot;data/observable-array&quot;"><js:module qname="&quot;data/observable-array&quot;:knownEvents"><js:doc><![CDATA[Known event names.]]></js:doc><js:var name="change"><js:type-annotation><js:string/></js:type-annotation></js:var></js:module><js:interface qname="&quot;data/observable-array&quot;:ChangedData"><js:doc><![CDATA[Event args for "changed" event.]]></js:doc><js:type-param name="T"/><js:extends><js:type name="&quot;data/observable&quot;:EventData"/></js:extends><js:property name="action"><js:doc><![CDATA[Change type.]]></js:doc><js:type-annotation><js:string/></js:type-annotation></js:property><js:property name="index"><js:doc><![CDATA[Start index.]]></js:doc><js:type-annotation><js:number/></js:type-annotation></js:property><js:property name="removed"><js:doc><![CDATA[Removed items.]]></js:doc><js:type-annotation><js:type name="Array"><js:type-ref name="T"/></js:type></js:type-annotation></js:property><js:property name="addedCount"><js:doc><![CDATA[Number of added items.]]></js:doc><js:type-annotation><js:number/></js:type-annotation></js:property></js:interface><js:class qname="&quot;data/observable-array&quot;:ChangeType"><js:doc><![CDATA[Change types.]]></js:doc><js:field name="Add" modifier="static"><js:type-annotation><js:string/></js:type-annotation></js:field><js:field name="Delete" modifier="static"><js:type-annotation><js:string/></js:type-annotation></js:field><js:field name="Update" modifier="static"><js:type-annotation><js:string/></js:type-annotation></js:field><js:field name="Splice" modifier="static"><js:type-annotation><js:string/></js:type-annotation></js:field></js:class><js:class qname="&quot;data/observable-array&quot;:ObservableArray"><js:doc><![CDATA[Advanced array like class used when you want to be notified when a change occurs.]]></js:doc><js:type-param name="T"/><js:extends><js:type name="&quot;data/observable&quot;:Observable"/></js:extends><js:method name="on"><js:param name="event"><js:type-annotation><js:string/></js:type-annotation></js:param><js:param name="callback"><js:type-annotation><js:function><js:param name="data"><js:type-annotation><js:type name="&quot;data/observable&quot;:EventData"/></js:type-annotation></js:param></js:function></js:type-annotation></js:param></js:method><js:method name="on"><js:doc><![CDATA[Raised when a change occurs.]]></js:doc><js:param name="event"><js:type-annotation/></js:param><js:param name="callback"><js:type-annotation><js:function><js:param name="args"><js:type-annotation><js:type name="&quot;data/observable-array&quot;:ChangedData"><js:type-ref name="T"/></js:type></js:type-annotation></js:param></js:function></js:type-annotation></js:param></js:method><js:method name="getItem"><js:doc><![CDATA[Returns item at specified index.]]></js:doc><js:param name="index"><js:type-annotation><js:number/></js:type-annotation></js:param><js:returns><js:type-ref name="T"/></js:returns></js:method><js:method name="setItem"><js:doc><![CDATA[Sets item at specified index.]]></js:doc><js:param name="index"><js:type-annotation><js:number/></js:type-annotation></js:param><js:param name="value"><js:type-annotation><js:type-ref name="T"/></js:type-annotation></js:param></js:method><js:method name="toString"><js:doc><![CDATA[Returns a string representation of an array.]]></js:doc><js:returns><js:string/></js:returns></js:method><js:method name="toLocaleString"><js:returns><js:string/></js:returns></js:method><js:method name="concat"><js:doc><![CDATA[Combines two or more arrays.]]></js:doc><js:type-param name="U"/><js:param name="items" rest="true"><js:doc><![CDATA[Additional items to add to the end of array1.]]></js:doc><js:type-annotation><js:array><js:type-ref name="U"/></js:array></js:type-annotation></js:param><js:returns><js:array><js:type-ref name="T"/></js:array></js:returns></js:method><js:method name="concat"><js:doc><![CDATA[Combines two or more arrays.]]></js:doc><js:param name="items" rest="true"><js:doc><![CDATA[Additional items to add to the end of array1.]]></js:doc><js:type-annotation><js:array><js:type-ref name="T"/></js:array></js:type-annotation></js:param><js:returns><js:array><js:type-ref name="T"/></js:array></js:returns></js:method><js:method name="join"><js:doc><![CDATA[Adds all the elements of an array separated by the specified separator string.]]></js:doc><js:param name="separator" optional="true"><js:doc><![CDATA[A string used to separate one element of an array from the next in the resulting String. If omitted, the array elements are separated with a comma.]]></js:doc><js:type-annotation><js:string/></js:type-annotation></js:param><js:returns><js:string/></js:returns></js:method><js:method name="pop"><js:doc><![CDATA[Removes the last element from an array and returns it.]]></js:doc><js:returns><js:type-ref name="T"/></js:returns></js:method><js:method name="push"><js:doc><![CDATA[Appends new elements to an array, and returns the new length of the array.]]></js:doc><js:param name="items"><js:doc><![CDATA[New elements of the Array.]]></js:doc><js:type-annotation><js:array><js:type-ref name="T"/></js:array></js:type-annotation></js:param><js:returns><js:number/></js:returns></js:method><js:method name="push"><js:doc><![CDATA[Appends new elements to an array, and returns the new length of the array.]]></js:doc><js:param name="items" rest="true"><js:doc><![CDATA[New elements of the Array.]]></js:doc><js:type-annotation><js:array><js:type-ref name="T"/></js:array></js:type-annotation></js:param><js:returns><js:number/></js:returns></js:method><js:method name="reverse"><js:doc><![CDATA[Reverses the elements in an Array. ]]></js:doc><js:returns><js:array><js:type-ref name="T"/></js:array></js:returns></js:method><js:method name="shift"><js:doc><![CDATA[Removes the first element from an array and returns it.]]></js:doc><js:returns><js:type-ref name="T"/></js:returns></js:method><js:method name="slice"><js:doc><![CDATA[Returns a section of an array.]]></js:doc><js:param name="start" optional="true"><js:doc><![CDATA[The beginning of the specified portion of the array.]]></js:doc><js:type-annotation><js:number/></js:type-annotation></js:param><js:param name="end" optional="true"><js:doc><![CDATA[The end of the specified portion of the array.]]></js:doc><js:type-annotation><js:number/></js:type-annotation></js:param><js:returns><js:array><js:type-ref name="T"/></js:array></js:returns></js:method><js:method name="sort"><js:doc><![CDATA[Sorts an array.]]></js:doc><js:param name="compareFn" optional="true"><js:doc><![CDATA[The name of the function used to determine the order of the elements. If omitted, the elements are sorted in ascending, ASCII character order.]]></js:doc><js:type-annotation><js:function><js:param name="a"><js:type-annotation><js:type-ref name="T"/></js:type-annotation></js:param><js:param name="b"><js:type-annotation><js:type-ref name="T"/></js:type-annotation></js:param><js:returns><js:number/></js:returns></js:function></js:type-annotation></js:param><js:returns><js:array><js:type-ref name="T"/></js:array></js:returns></js:method><js:method name="splice"><js:doc><![CDATA[Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.]]></js:doc><js:param name="start"><js:doc><![CDATA[The zero-based location in the array from which to start removing elements.]]></js:doc><js:type-annotation><js:number/></js:type-annotation></js:param><js:returns><js:array><js:type-ref name="T"/></js:array></js:returns></js:method><js:method name="splice"><js:doc><![CDATA[Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.]]></js:doc><js:param name="start"><js:doc><![CDATA[The zero-based location in the array from which to start removing elements.]]></js:doc><js:type-annotation><js:number/></js:type-annotation></js:param><js:param name="deleteCount"><js:doc><![CDATA[The number of elements to remove.]]></js:doc><js:type-annotation><js:number/></js:type-annotation></js:param><js:param name="items" rest="true"><js:doc><![CDATA[Elements to insert into the array in place of the deleted elements.]]></js:doc><js:type-annotation><js:array><js:type-ref name="T"/></js:array></js:type-annotation></js:param><js:returns><js:array><js:type-ref name="T"/></js:array></js:returns></js:method><js:method name="unshift"><js:doc><![CDATA[Inserts new elements at the start of an array.]]></js:doc><js:param name="items" rest="true"><js:doc><![CDATA[Elements to insert at the start of the Array.]]></js:doc><js:type-annotation><js:array><js:type-ref name="T"/></js:array></js:type-annotation></js:param><js:returns><js:number/></js:returns></js:method><js:method name="indexOf"><js:doc><![CDATA[Returns the index of the first occurrence of a value in an array.]]></js:doc><js:param name="searchElement"><js:doc><![CDATA[The value to locate in the array.]]></js:doc><js:type-annotation><js:type-ref name="T"/></js:type-annotation></js:param><js:param name="fromIndex" optional="true"><js:doc><![CDATA[The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.]]></js:doc><js:type-annotation><js:number/></js:type-annotation></js:param><js:returns><js:number/></js:returns></js:method><js:method name="lastIndexOf"><js:doc><![CDATA[Returns the index of the last occurrence of a specified value in an array.]]></js:doc><js:param name="searchElement"><js:doc><![CDATA[The value to locate in the array.]]></js:doc><js:type-annotation><js:type-ref name="T"/></js:type-annotation></js:param><js:param name="fromIndex" optional="true"><js:doc><![CDATA[The array index at which to begin the search. If fromIndex is omitted, the search starts at the last index in the array.]]></js:doc><js:type-annotation><js:number/></js:type-annotation></js:param><js:returns><js:number/></js:returns></js:method><js:method name="every"><js:doc><![CDATA[Determines whether all the members of an array satisfy the specified test.]]></js:doc><js:param name="callbackfn"><js:doc><![CDATA[A function that accepts up to three arguments. The every method calls the callbackfn function for each element in array1 until the callbackfn returns false, or until the end of the array.]]></js:doc><js:type-annotation><js:function><js:param name="value"><js:type-annotation><js:type-ref name="T"/></js:type-annotation></js:param><js:param name="index"><js:type-annotation><js:number/></js:type-annotation></js:param><js:param name="array"><js:type-annotation><js:array><js:type-ref name="T"/></js:array></js:type-annotation></js:param><js:returns><js:boolean/></js:returns></js:function></js:type-annotation></js:param><js:param name="thisArg" optional="true"><js:doc><![CDATA[An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.]]></js:doc><js:type-annotation><js:object/></js:type-annotation></js:param><js:returns><js:boolean/></js:returns></js:method><js:method name="some"><js:doc><![CDATA[Determines whether the specified callback function returns true for any element of an array.]]></js:doc><js:param name="callbackfn"><js:doc><![CDATA[A function that accepts up to three arguments. The some method calls the callbackfn function for each element in array1 until the callbackfn returns true, or until the end of the array.]]></js:doc><js:type-annotation><js:function><js:param name="value"><js:type-annotation><js:type-ref name="T"/></js:type-annotation></js:param><js:param name="index"><js:type-annotation><js:number/></js:type-annotation></js:param><js:param name="array"><js:type-annotation><js:array><js:type-ref name="T"/></js:array></js:type-annotation></js:param><js:returns><js:boolean/></js:returns></js:function></js:type-annotation></js:param><js:param name="thisArg" optional="true"><js:doc><![CDATA[An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.]]></js:doc><js:type-annotation><js:object/></js:type-annotation></js:param><js:returns><js:boolean/></js:returns></js:method><js:method name="forEach"><js:doc><![CDATA[Performs the specified action for each element in an array.]]></js:doc><js:param name="callbackfn"><js:doc><![CDATA[A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the array. ]]></js:doc><js:type-annotation><js:function><js:param name="value"><js:type-annotation><js:type-ref name="T"/></js:type-annotation></js:param><js:param name="index"><js:type-annotation><js:number/></js:type-annotation></js:param><js:param name="array"><js:type-annotation><js:array><js:type-ref name="T"/></js:array></js:type-annotation></js:param></js:function></js:type-annotation></js:param><js:param name="thisArg" optional="true"><js:doc><![CDATA[An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.]]></js:doc><js:type-annotation><js:object/></js:type-annotation></js:param></js:method><js:method name="map"><js:doc><![CDATA[Calls a defined callback function on each element of an array, and returns an array that contains the results.]]></js:doc><js:type-param name="U"/><js:param name="callbackfn"><js:doc><![CDATA[A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array. ]]></js:doc><js:type-annotation><js:function><js:param name="value"><js:type-annotation><js:type-ref name="T"/></js:type-annotation></js:param><js:param name="index"><js:type-annotation><js:number/></js:type-annotation></js:param><js:param name="array"><js:type-annotation><js:array><js:type-ref name="T"/></js:array></js:type-annotation></js:param><js:returns><js:type-ref name="U"/></js:returns></js:function></js:type-annotation></js:param><js:param name="thisArg" optional="true"><js:doc><![CDATA[An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.]]></js:doc><js:type-annotation><js:object/></js:type-annotation></js:param><js:returns><js:array><js:type-ref name="U"/></js:array></js:returns></js:method><js:method name="filter"><js:doc><![CDATA[Returns the elements of an array that meet the condition specified in a callback function. ]]></js:doc><js:param name="callbackfn"><js:doc><![CDATA[A function that accepts up to three arguments. The filter method calls the callbackfn function one time for each element in the array. ]]></js:doc><js:type-annotation><js:function><js:param name="value"><js:type-annotation><js:type-ref name="T"/></js:type-annotation></js:param><js:param name="index"><js:type-annotation><js:number/></js:type-annotation></js:param><js:param name="array"><js:type-annotation><js:array><js:type-ref name="T"/></js:array></js:type-annotation></js:param><js:returns><js:boolean/></js:returns></js:function></js:type-annotation></js:param><js:param name="thisArg" optional="true"><js:doc><![CDATA[An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.]]></js:doc><js:type-annotation><js:object/></js:type-annotation></js:param><js:returns><js:array><js:type-ref name="T"/></js:array></js:returns></js:method><js:method name="reduce"><js:doc><![CDATA[Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.]]></js:doc><js:param name="callbackfn"><js:doc><![CDATA[A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.]]></js:doc><js:type-annotation><js:function><js:param name="previousValue"><js:type-annotation><js:type-ref name="T"/></js:type-annotation></js:param><js:param name="currentValue"><js:type-annotation><js:type-ref name="T"/></js:type-annotation></js:param><js:param name="currentIndex"><js:type-annotation><js:number/></js:type-annotation></js:param><js:param name="array"><js:type-annotation><js:array><js:type-ref name="T"/></js:array></js:type-annotation></js:param><js:returns><js:type-ref name="T"/></js:returns></js:function></js:type-annotation></js:param><js:param name="initialValue" optional="true"><js:doc><![CDATA[If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.]]></js:doc><js:type-annotation><js:type-ref name="T"/></js:type-annotation></js:param><js:returns><js:type-ref name="T"/></js:returns></js:method><js:method name="reduce"><js:doc><![CDATA[Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.]]></js:doc><js:type-param name="U"/><js:param name="callbackfn"><js:doc><![CDATA[A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.]]></js:doc><js:type-annotation><js:function><js:param name="previousValue"><js:type-annotation><js:type-ref name="U"/></js:type-annotation></js:param><js:param name="currentValue"><js:type-annotation><js:type-ref name="T"/></js:type-annotation></js:param><js:param name="currentIndex"><js:type-annotation><js:number/></js:type-annotation></js:param><js:param name="array"><js:type-annotation><js:array><js:type-ref name="T"/></js:array></js:type-annotation></js:param><js:returns><js:type-ref name="U"/></js:returns></js:function></js:type-annotation></js:param><js:param name="initialValue"><js:doc><![CDATA[If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.]]></js:doc><js:type-annotation><js:type-ref name="U"/></js:type-annotation></js:param><js:returns><js:type-ref name="U"/></js:returns></js:method><js:method name="reduceRight"><js:doc><![CDATA[Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.]]></js:doc><js:param name="callbackfn"><js:doc><![CDATA[A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array. ]]></js:doc><js:type-annotation><js:function><js:param name="previousValue"><js:type-annotation><js:type-ref name="T"/></js:type-annotation></js:param><js:param name="currentValue"><js:type-annotation><js:type-ref name="T"/></js:type-annotation></js:param><js:param name="currentIndex"><js:type-annotation><js:number/></js:type-annotation></js:param><js:param name="array"><js:type-annotation><js:array><js:type-ref name="T"/></js:array></js:type-annotation></js:param><js:returns><js:type-ref name="T"/></js:returns></js:function></js:type-annotation></js:param><js:param name="initialValue" optional="true"><js:doc><![CDATA[If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.]]></js:doc><js:type-annotation><js:type-ref name="T"/></js:type-annotation></js:param><js:returns><js:type-ref name="T"/></js:returns></js:method><js:method name="reduceRight"><js:doc><![CDATA[Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.]]></js:doc><js:type-param name="U"/><js:param name="callbackfn"><js:doc><![CDATA[A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array. ]]></js:doc><js:type-annotation><js:function><js:param name="previousValue"><js:type-annotation><js:type-ref name="U"/></js:type-annotation></js:param><js:param name="currentValue"><js:type-annotation><js:type-ref name="T"/></js:type-annotation></js:param><js:param name="currentIndex"><js:type-annotation><js:number/></js:type-annotation></js:param><js:param name="array"><js:type-annotation><js:array><js:type-ref name="T"/></js:array></js:type-annotation></js:param><js:returns><js:type-ref name="U"/></js:returns></js:function></js:type-annotation></js:param><js:param name="initialValue"><js:doc><![CDATA[If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.]]></js:doc><js:type-annotation><js:type-ref name="U"/></js:type-annotation></js:param><js:returns><js:type-ref name="U"/></js:returns></js:method><js:field name="length"><js:doc><![CDATA[Gets or sets the length of the array. This is a number one higher than the highest element defined in an array.]]></js:doc><js:type-annotation><js:number/></js:type-annotation></js:field></js:class></js:module><js:module qname="&quot;data/virtual-array&quot;"><js:module qname="&quot;data/virtual-array&quot;:knownEvents"><js:doc><![CDATA[Known event names.]]></js:doc><js:var name="itemsLoading"><js:type-annotation><js:string/></js:type-annotation></js:var><js:var name="change"><js:type-annotation><js:string/></js:type-annotation></js:var></js:module><js:interface qname="&quot;data/virtual-array&quot;:ChangedData"><js:type-param name="T"/><js:extends><js:type name="&quot;data/observable-array&quot;:ChangedData"><js:type-ref name="T"/></js:type></js:extends></js:interface><js:class qname="&quot;data/virtual-array&quot;:ChangeType"><js:doc><![CDATA[Change types.]]></js:doc><js:extends><js:type name="&quot;data/observable-array&quot;:ChangeType"/></js:extends></js:class><js:class qname="&quot;data/virtual-array&quot;:VirtualArray"><js:doc><![CDATA[Advanced array like class that helps loading items on demand. Use "length" property to specify total number of items, 
"loadSize" to specify number of items to be requested in a single request, "itemsLoading" event to handle items request and 
"load()" method to copy items into the array. All already loaded items are cached in-memory and when "getItem()" method is called 
the array will raise "itemsLoading" event for still not loaded items. Example:
var virtualArray = new VirtualArray&lt;number&gt;(100);
virtualArray.loadSize = 15;
virtualArray.on("itemsLoading", (args: virtualArrayDef.ItemsLoading) =&gt; {
    var itemsToLoad = new Array&lt;number&gt;();
    for (var i = 0; i &lt; args.count; i++) {
        itemsToLoad.push(args.index + i);
    }
    virtualArray.load(args.index, itemsToLoad);
});]]></js:doc><js:type-param name="T"/><js:extends><js:type name="&quot;data/observable&quot;:Observable"/></js:extends><js:field name="length"><js:doc><![CDATA[Gets or sets length for the virtual array.]]></js:doc><js:type-annotation><js:number/></js:type-annotation></js:field><js:field name="loadSize"><js:doc><![CDATA[Gets or sets load size for the virtual array.]]></js:doc><js:type-annotation><js:number/></js:type-annotation></js:field><js:method name="getItem"><js:doc><![CDATA[Returns item at specified index.]]></js:doc><js:param name="index"><js:type-annotation><js:number/></js:type-annotation></js:param><js:returns><js:type-ref name="T"/></js:returns></js:method><js:method name="setItem"><js:doc><![CDATA[Sets item at specified index.]]></js:doc><js:param name="index"><js:type-annotation><js:number/></js:type-annotation></js:param><js:param name="value"><js:type-annotation><js:type-ref name="T"/></js:type-annotation></js:param></js:method><js:method name="load"><js:doc><![CDATA[Loads items from an array starting at index.]]></js:doc><js:param name="index"><js:type-annotation><js:number/></js:type-annotation></js:param><js:param name="items"><js:type-annotation><js:array><js:type-ref name="T"/></js:array></js:type-annotation></js:param></js:method><js:method name="on"><js:param name="event"><js:type-annotation><js:string/></js:type-annotation></js:param><js:param name="callback"><js:type-annotation><js:function><js:param name="data"><js:type-annotation><js:type name="&quot;data/observable&quot;:EventData"/></js:type-annotation></js:param></js:function></js:type-annotation></js:param></js:method><js:method name="on"><js:doc><![CDATA[Raised when still not loaded items are requested.]]></js:doc><js:param name="event"><js:type-annotation/></js:param><js:param name="callback"><js:type-annotation><js:function><js:param name="args"><js:type-annotation><js:type name="&quot;data/virtual-array&quot;:ItemsLoading"/></js:type-annotation></js:param></js:function></js:type-annotation></js:param></js:method><js:method name="on"><js:doc><![CDATA[Raised when a change occurs.]]></js:doc><js:param name="event"><js:type-annotation/></js:param><js:param name="callback"><js:type-annotation><js:function><js:param name="args"><js:type-annotation><js:type name="&quot;data/virtual-array&quot;:ChangedData"><js:type-ref name="T"/></js:type></js:type-annotation></js:param></js:function></js:type-annotation></js:param></js:method></js:class><js:interface qname="&quot;data/virtual-array&quot;:ItemsLoading"><js:doc><![CDATA[Event args for "itemsLoading" event.]]></js:doc><js:extends><js:type name="&quot;data/observable&quot;:EventData"/></js:extends><js:property name="index"><js:doc><![CDATA[Start index.]]></js:doc><js:type-annotation><js:number/></js:type-annotation></js:property><js:property name="count"><js:doc><![CDATA[Number of items to load.]]></js:doc><js:type-annotation><js:number/></js:type-annotation></js:property></js:interface></js:module><js:module qname="&quot;ui/gestures&quot;"><js:enum qname="&quot;ui/gestures&quot;:GestureTypes"><js:member name="Tap"/><js:member name="DoubleTap"/><js:member name="Pinch"/><js:member name="Pan"/><js:member name="Swipe"/><js:member name="Rotation"/><js:member name="LongPress"/></js:enum><js:enum qname="&quot;ui/gestures&quot;:SwipeDirection"><js:member name="Right"/><js:member name="Left"/><js:member name="Up"/><js:member name="Down"/></js:enum><js:interface qname="&quot;ui/gestures&quot;:GestureEventData"><js:property name="type"><js:type-annotation><js:type name="&quot;ui/gestures&quot;:GestureTypes"/></js:type-annotation></js:property><js:property name="view"><js:type-annotation><js:type name="&quot;ui/core/view&quot;:View"/></js:type-annotation></js:property><js:property name="ios"><js:type-annotation><js:type name="UIGestureRecognizer"/></js:type-annotation></js:property><js:property name="android"><js:type-annotation><js:object/></js:type-annotation></js:property></js:interface><js:interface qname="&quot;ui/gestures&quot;:PinchGestureEventData"><js:extends><js:type name="&quot;ui/gestures&quot;:GestureEventData"/></js:extends><js:property name="scale"><js:type-annotation><js:number/></js:type-annotation></js:property></js:interface><js:interface qname="&quot;ui/gestures&quot;:SwipeGestureEventData"><js:extends><js:type name="&quot;ui/gestures&quot;:GestureEventData"/></js:extends><js:property name="direction"><js:type-annotation><js:type name="&quot;ui/gestures&quot;:SwipeDirection"/></js:type-annotation></js:property></js:interface><js:interface qname="&quot;ui/gestures&quot;:RotationGestureEventData"><js:extends><js:type name="&quot;ui/gestures&quot;:GestureEventData"/></js:extends><js:property name="rotation"><js:type-annotation><js:number/></js:type-annotation></js:property></js:interface><js:class qname="&quot;ui/gestures&quot;:GesturesObserver"><js:doc><![CDATA[Provides options for the GesturesObserver.]]></js:doc><js:method name="observe"><js:param name="target"><js:type-annotation><js:type name="&quot;ui/core/view&quot;:View"/></js:type-annotation></js:param><js:param name="type"><js:type-annotation><js:type name="&quot;ui/gestures&quot;:GestureTypes"/></js:type-annotation></js:param></js:method><js:method name="disconnect"/></js:class><js:function name="observe"><js:param name="target"><js:type-annotation><js:type name="&quot;ui/core/view&quot;:View"/></js:type-annotation></js:param><js:param name="type"><js:type-annotation><js:type name="&quot;ui/gestures&quot;:GestureTypes"/></js:type-annotation></js:param><js:param name="callback"><js:type-annotation><js:function><js:param name="args"><js:type-annotation><js:type name="&quot;ui/gestures&quot;:GestureEventData"/></js:type-annotation></js:param></js:function></js:type-annotation></js:param><js:returns><js:type name="&quot;ui/gestures&quot;:GesturesObserver"/></js:returns></js:function><js:function name="toString"><js:param name="type"><js:type-annotation><js:type name="&quot;ui/gestures&quot;:GestureTypes"/></js:type-annotation></js:param><js:param name="separator" optional="true"><js:type-annotation><js:string/></js:type-annotation></js:param><js:returns><js:string/></js:returns></js:function><js:function name="fromString"><js:param name="type"><js:type-annotation><js:string/></js:type-annotation></js:param><js:returns><js:type name="&quot;ui/gestures&quot;:GestureTypes"/></js:returns></js:function></js:module><js:module qname="&quot;ui/styling&quot;"><js:class qname="&quot;ui/styling&quot;:Property"><js:doc><![CDATA[Represents an observable property which can have its value set form CSS style.]]></js:doc><js:extends><js:type name="&quot;ui/core/dependency-observable&quot;:Property"/></js:extends><js:field name="cssName"><js:doc><![CDATA[Gets the CSS name of the property.]]></js:doc><js:type-annotation><js:string/></js:type-annotation></js:field><js:field name="valueConverter"><js:doc><![CDATA[Gets the converter function that will be used to convert the CSS value to the actual property type. ]]></js:doc><js:type-annotation><js:function><js:param name="value"><js:type-annotation><js:object/></js:type-annotation></js:param><js:returns><js:object/></js:returns></js:function></js:type-annotation></js:field></js:class><js:class qname="&quot;ui/styling&quot;:Style"><js:doc><![CDATA[Represents as style object containing all the style properties for a particular view.]]></js:doc><js:extends><js:type name="&quot;ui/core/dependency-observable&quot;:DependencyObservable"/></js:extends><js:field name="color"><js:doc><![CDATA[Gets or sets the color style property.]]></js:doc><js:type-annotation><js:type name="&quot;color&quot;:Color"/></js:type-annotation></js:field><js:field name="backgroundColor"><js:doc><![CDATA[Gets or sets the background-color style property.]]></js:doc><js:type-annotation><js:type name="&quot;color&quot;:Color"/></js:type-annotation></js:field><js:field name="fontSize"><js:doc><![CDATA[Gets or sets font-size style property.]]></js:doc><js:type-annotation><js:number/></js:type-annotation></js:field></js:class><js:module qname="&quot;ui/styling&quot;:properties"><js:doc><![CDATA[Encapsulates the style properties definitions and utility methods.]]></js:doc><js:var name="fontSizeProperty"><js:type-annotation><js:type name="&quot;ui/styling&quot;:Property"/></js:type-annotation></js:var><js:var name="colorProperty"><js:type-annotation><js:type name="&quot;ui/styling&quot;:Property"/></js:type-annotation></js:var><js:var name="backgroundColorProperty"><js:type-annotation><js:type name="&quot;ui/styling&quot;:Property"/></js:type-annotation></js:var><js:function name="getPropertyByName"><js:doc><![CDATA[Gets style Property by its name.]]></js:doc><js:param name="name"><js:type-annotation><js:string/></js:type-annotation></js:param><js:returns><js:type name="&quot;ui/styling&quot;:Property"/></js:returns></js:function><js:function name="getPropertyByCssName"><js:doc><![CDATA[Gets style Property by its CSS name.]]></js:doc><js:param name="name"><js:type-annotation><js:string/></js:type-annotation></js:param><js:returns><js:type name="&quot;ui/styling&quot;:Property"/></js:returns></js:function><js:function name="eachProperty"><js:doc><![CDATA[Executes a callback for all defined style properties.]]></js:doc><js:param name="callback"><js:type-annotation><js:function><js:param name="property"><js:type-annotation><js:type name="&quot;ui/styling&quot;:Property"/></js:type-annotation></js:param></js:function></js:type-annotation></js:param></js:function><js:function name="eachInheritableProperty"><js:doc><![CDATA[Executes a callback for all defined inheritable style properties.]]></js:doc><js:param name="callback"><js:type-annotation><js:function><js:param name="property"><js:type-annotation><js:type name="&quot;ui/styling&quot;:Property"/></js:type-annotation></js:param></js:function></js:type-annotation></js:param></js:function></js:module><js:module qname="&quot;ui/styling&quot;:converters"><js:doc><![CDATA[Encapsulates CSS converter methods.]]></js:doc><js:function name="colorConverter"><js:doc><![CDATA[CSS color converter function.]]></js:doc><js:param name="cssValue"><js:doc><![CDATA[The css value.]]></js:doc><js:type-annotation><js:object/></js:type-annotation></js:param><js:returns><js:type name="&quot;color&quot;:Color"/></js:returns></js:function><js:function name="fontSizeConverter"><js:doc><![CDATA[CSS font-size converter function.]]></js:doc><js:param name="cssValue"><js:doc><![CDATA[The css value.]]></js:doc><js:type-annotation><js:object/></js:type-annotation></js:param><js:returns><js:number/></js:returns></js:function></js:module><js:module qname="&quot;ui/styling&quot;:visualStates"><js:doc><![CDATA[Encapsulates visual states names.]]></js:doc><js:var name="Normal"><js:type-annotation><js:string/></js:type-annotation></js:var><js:var name="Hovered"><js:type-annotation><js:string/></js:type-annotation></js:var><js:var name="Pressed"><js:type-annotation><js:string/></js:type-annotation></js:var></js:module><js:module qname="&quot;ui/styling&quot;:stylers"><js:doc><![CDATA[Encapsulates styler classes used for converting NativeScript properties to properties of the native views/widgets.]]></js:doc><js:function name="registerStyler"><js:doc><![CDATA[Registers a styler that will be used for all views of particular type.]]></js:doc><js:param name="viewType"><js:type-annotation><js:string/></js:type-annotation></js:param><js:param name="styler"><js:type-annotation><js:type name="&quot;ui/styling&quot;.stylers:Styler"/></js:type-annotation></js:param></js:function><js:function name="getStyler"><js:doc><![CDATA[Gets a styler to be used for a particular view.]]></js:doc><js:param name="view"><js:doc><![CDATA[The view.]]></js:doc><js:type-annotation><js:type name="&quot;ui/core/view&quot;:View"/></js:type-annotation></js:param><js:returns><js:type name="&quot;ui/styling&quot;.stylers:Styler"/></js:returns></js:function><js:class qname="&quot;ui/styling&quot;.stylers:StylePropertyChangedHandler"><js:doc><![CDATA[Represents an object that defines how style property should be applied on a native view/widget.
It holds 3 callbacks:
  1. applyCallback - called when a property value should be applied onto the native view/widget.
  2. resetCallback - called when the property value is cleared to restore the native view/widget in its original state. The callback
also receives as a parameter the value stored by the getNativeValue callback.
  3. getNativeValue - called when a style property is set for the first time to get the default native value for this property
in the native view/widget. This value will be passed to resetCallback in case the property value is cleared. Optional.]]></js:doc></js:class><js:class qname="&quot;ui/styling&quot;.stylers:Styler"><js:doc><![CDATA[Represents an objects that holds all StylePropertyChangedHandlers for a given view type.]]></js:doc><js:method name="hasHandler"><js:doc><![CDATA[Returns true if the Styler contains StylePropertyChangedHandler for the given style property.]]></js:doc><js:param name="property"><js:doc><![CDATA[The style property.]]></js:doc><js:type-annotation><js:type name="&quot;ui/core/dependency-observable&quot;:Property"/></js:type-annotation></js:param><js:returns><js:boolean/></js:returns></js:method><js:method name="getHandler"><js:doc><![CDATA[Gets the StylePropertyChangedHandler for the given style property.]]></js:doc><js:param name="property"><js:doc><![CDATA[The style property.]]></js:doc><js:type-annotation><js:type name="&quot;ui/core/dependency-observable&quot;:Property"/></js:type-annotation></js:param><js:returns><js:type name="&quot;ui/styling&quot;.stylers:StylePropertyChangedHandler"/></js:returns></js:method><js:method name="setHandler"><js:doc><![CDATA[Sets the StylePropertyChangedHandler for the given style property.]]></js:doc><js:param name="property"><js:doc><![CDATA[The style property.]]></js:doc><js:type-annotation><js:type name="&quot;ui/core/dependency-observable&quot;:Property"/></js:type-annotation></js:param><js:param name="handler"><js:doc><![CDATA[The handler.]]></js:doc><js:type-annotation><js:type name="&quot;ui/styling&quot;.stylers:StylePropertyChangedHandler"/></js:type-annotation></js:param></js:method></js:class></js:module></js:module><js:module qname="&quot;ui/builder&quot;"><js:function name="load"><js:param name="fileName"><js:type-annotation><js:string/></js:type-annotation></js:param><js:param name="exports"><js:type-annotation><js:object/></js:type-annotation></js:param><js:returns><js:type name="&quot;ui/core/view&quot;:View"/></js:returns></js:function></js:module><js:module qname="&quot;ui/text-base&quot;"><js:var name="textProperty"><js:type-annotation><js:type name="&quot;ui/core/dependency-observable&quot;:Property"/></js:type-annotation></js:var><js:class qname="&quot;ui/text-base&quot;:TextBase"><js:doc><![CDATA[Represents the base class for all text widgets.]]></js:doc><js:extends><js:type name="&quot;ui/core/view&quot;:View"/></js:extends><js:field name="text"><js:doc><![CDATA[Gets or sets the text of a text field.]]></js:doc><js:type-annotation><js:string/></js:type-annotation></js:field></js:class></js:module><js:module qname="&quot;ui/core/weakEventListener&quot;"><js:interface qname="&quot;ui/core/weakEventListener&quot;:WeakEventListenerOptions"><js:property name="target"><js:doc><![CDATA[Weak reference to the subscriber (target) of the event listener.]]></js:doc><js:type-annotation><js:type name="WeakRef"><js:object/></js:type></js:type-annotation></js:property><js:property name="source"><js:doc><![CDATA[Weak reference to an instance of observable.Observable class which emits the event.]]></js:doc><js:type-annotation><js:type name="WeakRef"><js:type name="&quot;data/observable&quot;:Observable"/></js:type></js:type-annotation></js:property><js:property name="eventName"><js:doc><![CDATA[Name of the event.]]></js:doc><js:type-annotation><js:string/></js:type-annotation></js:property><js:property name="handler"><js:doc><![CDATA[The function which should be called when event occurs.]]></js:doc><js:type-annotation><js:function><js:param name="eventData"><js:type-annotation><js:type name="&quot;data/observable&quot;:EventData"/></js:type-annotation></js:param></js:function></js:type-annotation></js:property><js:property name="handlerContext" optional="true"><js:doc><![CDATA[The context (thisArg) in which handler should be executed.]]></js:doc><js:type-annotation><js:object/></js:type-annotation></js:property><js:property name="key"><js:doc><![CDATA[A string to use as key for key value pair instance.]]></js:doc><js:type-annotation><js:string/></js:type-annotation></js:property></js:interface><js:class qname="&quot;ui/core/weakEventListener&quot;:WeakEventListener"><js:method name="addWeakEventListener" modifier="static"><js:doc><![CDATA[Creates and initialize WeakEventListener (if all required options are set).]]></js:doc><js:param name="options"><js:doc><![CDATA[An instance of WeakEventListenerOptions needed to create WeakEventListener instance.
Returns true if a WeakEventListener instance is created successfully.]]></js:doc><js:type-annotation><js:type name="&quot;ui/core/weakEventListener&quot;:WeakEventListenerOptions"/></js:type-annotation></js:param><js:returns><js:boolean/></js:returns></js:method><js:method name="removeWeakEventListener" modifier="static"><js:doc><![CDATA[Removes and clears all resources from WeakEventListener.]]></js:doc><js:param name="options"><js:doc><![CDATA[An instance of WeakEventListenerOptions used to create the WeakEventListener instance.]]></js:doc><js:type-annotation><js:type name="&quot;ui/core/weakEventListener&quot;:WeakEventListenerOptions"/></js:type-annotation></js:param></js:method></js:class></js:module></js:global>